
// spi_mode = 2
#define SPI_MODE2 0

static const uint8_t cmd9106_chakeyake_init[] = {
	//LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	LCM_CMD(0xb3, 1), 0x03,
	LCM_CMD(0xb6, 1), 0x11,
	LCM_CMD(0xa3, 1), 0x11, // Frame Rate
	LCM_CMD(0xac, 1), 0x0b,
	LCM_CMD(0x21, 0), // Display Inversion ON
	//LCM_CMD(0x36, 1), 0xd0, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0xb4, 1), 0x21, // Display Inversion Control
	LCM_CMD(0xaf, 1), 0x80,
	LCM_CMD(0xb0, 1), 0x40,
	LCM_CMD(0xc6, 1), 0x19,
	LCM_CMD(0xf3, 2), 0x01,0x55,
	// Set Gamma 1
	LCM_CMD(0xf0, 14), 0x2e,0x4b,0x24,0x58,
		0x37,0x28,0x2f,0x00, 0x2a,0x0a,0x0a,0x05, 0x05,0x0f,
	// Set Gamma 2
	LCM_CMD(0xf1, 14), 0x0b,0x2c,0x24,0x3e,
		0x28,0x28,0x2f,0x00, 0x08,0x0b,0x0b,0x04, 0x03,0x0f,
	LCM_CMD(0x35, 1), 0x00,
	LCM_CMD(0x44, 1), 0x00,
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd7C89F0_inoi_init[] = {
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	// Frame Rate Control 1-3
	LCM_CMD(0xb1, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb2, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb3, 6), 0x05,0x3c,0x3c,0x05,0x3c,0x3c,
	LCM_CMD(0xb4, 1), 0x03, // Display Inversion Control
	// Power Control 1-5
	LCM_CMD(0xc0, 3), 0x28,0x08,0x04,
	LCM_CMD(0xc1, 1), 0xc0,
	LCM_CMD(0xc2, 2), 0x0d,0x00,
	LCM_CMD(0xc3, 2), 0x8d,0x2a,
	LCM_CMD(0xc4, 2), 0x8d,0xee,
	LCM_CMD(0xc5, 1), 0x0a, // VCOM Control 1
	//LCM_CMD(0x36, 1), 0xd8, // Memory Access Control
	// Set Gamma 1
	LCM_CMD(0xe0, 16), 0x04,0x22,0x07,0x0a,
		0x2e,0x30,0x25,0x2a, 0x28,0x26,0x2e,0x3a, 0x00,0x01,0x03,0x13,
	// Set Gamma 2
	LCM_CMD(0xe1, 16), 0x04,0x16,0x06,0x0d,
		0x2d,0x26,0x23,0x27, 0x27,0x25,0x2d,0x3b, 0x00,0x01,0x04,0x13,
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd9106_bq_init[] = {
	//LCM_DELAY(120),
	//LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	LCM_CMD(0xb1, 1), 0xc0,
	LCM_CMD(0xb3, 1), 0x03,
	LCM_CMD(0xb6, 1), 0x01,
	LCM_CMD(0xa3, 1), 0x11,
	LCM_CMD(0x21, 0),
	//LCM_CMD(0x36, 1), 0xd0, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05,
	LCM_CMD(0xb4, 1), 0x21,
	LCM_CMD(0xe6, 2), 0x4a,0x3d,
	LCM_CMD(0xe7, 2), 0x3e,0x3d,
	// Set Gamma 1
	LCM_CMD(0xf0, 14), 0x25,0x58,0x24,0x68,
		0xad,0x36,0x38,0x00, 0x0b,0x15,0x15,0x17, 0x15,0x0f,
	// Set Gamma 2
	LCM_CMD(0xf1, 14), 0x00,0x1e,0x25,0x30,
		0x97,0x03,0x03,0x00, 0x00,0x07,0x07,0x15, 0x14,0x0f,
	LCM_CMD(0xfe, 0),
	LCM_CMD(0xff, 0),
	LCM_CMD(0x35, 1), 0x00,
	LCM_CMD(0x44, 1), 0x00,
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd9306_ipro_init[] = {
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	//LCM_CMD(0x36, 1), 0x48, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05,
	LCM_CMD(0xa4, 2), 0x44,0x44,
	LCM_CMD(0xa5, 2), 0x42,0x42,
	LCM_CMD(0xaa, 2), 0x88,0x88,
	LCM_CMD(0xe8, 2), 0x11,0x0b,
	LCM_CMD(0xe3, 2), 0x01,0x10,
	LCM_CMD(0xff, 1), 0x61,
	LCM_CMD(0xac, 1), 0x00,
	LCM_CMD(0xad, 1), 0x33,
	LCM_CMD(0xae, 1), 0x2b,
	LCM_CMD(0xaf, 1), 0x55,
	LCM_CMD(0xa6, 2), 0x2a,0x2a,
	LCM_CMD(0xa7, 2), 0x2b,0x2b,
	LCM_CMD(0xa8, 2), 0x18,0x18,
	LCM_CMD(0xa9, 2), 0x2a,0x2a,
	//LCM_CMD(0x2a, 4), 0x00,0x00,0x00,0xef,
	//LCM_CMD(0x2b, 4), 0x00,0x00,0x01,0x3f,
	//LCM_CMD(0x2c, 0),
	LCM_CMD(0xf0, 6), 0x02,0x00,0x00,0x0a,0x0e,0x10,
	LCM_CMD(0xf1, 6), 0x01,0x02,0x00,0x28,0x35,0x0f,
	LCM_CMD(0xf2, 6), 0x10,0x09,0x35,0x03,0x03,0x43,
	LCM_CMD(0xf3, 6), 0x11,0x0b,0x54,0x05,0x03,0x60,
	LCM_CMD(0xf4, 6), 0x0c,0x17,0x16,0x11,0x12,0x0f,
	LCM_CMD(0xf5, 6), 0x08,0x17,0x17,0x2a,0x2a,0x0f,
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
#if 1 // first call
	LCM_CMD(0x44, 2), 0x00,0x05, // Set Tear Scanline
#else // second call
	LCM_CMD(0x44, 2), 0x00,0x06,
#endif
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd9307_itop_init[] = {
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	//LCM_CMD(0x36, 1), 0x48, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05,
	LCM_CMD(0x21, 0),
	LCM_CMD(0x86, 1), 0x98,
	LCM_CMD(0x89, 1), 0x03,
	LCM_CMD(0x8b, 1), 0x84,
	LCM_CMD(0x8d, 1), 0x33,
	LCM_CMD(0x8e, 1), 0x0f,
	LCM_CMD(0xe8, 2), 0x12,0x00, // Frame Rate
	LCM_CMD(0xff, 1), 0x62,
	LCM_CMD(0x99, 1), 0x3e,
	LCM_CMD(0x9d, 1), 0x4b,
	LCM_CMD(0x98, 1), 0x3e,
	LCM_CMD(0x9c, 1), 0x4b,
	LCM_CMD(0xc3, 1), 0x38,
	LCM_CMD(0xc4, 1), 0x34,
	LCM_CMD(0xc9, 1), 0x08,
	LCM_CMD(0xf0, 6), 0x80,0x00,0x00,0x02,0x05,0x2b,
	LCM_CMD(0xf1, 6), 0x41,0x95,0xb4,0x1c,0x1d,0xcf,
	LCM_CMD(0xf2, 6), 0x40,0x19,0x00,0x00,0x06,0x41,
	LCM_CMD(0xf3, 6), 0x53,0xbf,0xbe,0x25,0x29,0xff,
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x44, 2), 0x00,0x0a, // Set Tear Scanline
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd8966_unknown_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0xb2, 5), 0x0c,0x0c,0x00,0x33,0x33,
	LCM_CMD(0x35, 1), 0x00,
	//LCM_CMD(0x36, 1), 0x00, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05,
	LCM_CMD(0xb7, 1), 0x75,
	LCM_CMD(0xbb, 1), 0x37,
	LCM_CMD(0xc0, 1), 0x2c,
	LCM_CMD(0xc2, 1), 0x01,
	LCM_CMD(0xc3, 1), 0x0f,
	LCM_CMD(0xc4, 1), 0x20,
	LCM_CMD(0xc6, 1), 0x0f,
	LCM_CMD(0xd0, 2), 0xa7,0xa1,
	LCM_CMD(0xd0, 2), 0xa4,0xa1,
	LCM_CMD(0xd6, 1), 0xa1,
	// Set Gamma 1
	LCM_CMD(0xe0, 14), 0xd0,0x05,0x0f,0x14,
		0x15,0x2f,0x33,0x33, 0x44,0x0f,0x16,0x14, 0x15,0x18,
	// Set Gamma 2
	LCM_CMD(0xe1, 14), 0xd0,0x01,0x07,0x08,
		0x09,0x23,0x33,0x44, 0x45,0x35,0x15,0x16, 0x18,0x1c,
	LCM_CMD(0x29, 0), // Display ON
	LCM_DELAY(120),
	//LCM_CMD(0x2c, 0),
	LCM_END
};

static const uint8_t cmd7735_nokia_init[] = {
	LCM_CMD(0xf0, 1), 0x11,
	LCM_CMD(0xd6, 1), 0xcb,
	LCM_CMD(0xb1, 3), 0x05,0x4a,0x4a,
	LCM_CMD(0xb2, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb3, 6), 0x05,0x3c,0x3c,0x05,0x3c,0x3c,
	LCM_CMD(0xb4, 2), 0x03,0x02,
	LCM_CMD(0xc0, 3), 0xa1,0x04,0x84,
	LCM_CMD(0xc1, 1), 0xc4,
	LCM_CMD(0xc2, 2), 0x0d,0x00,
	LCM_CMD(0xc3, 2), 0x8d,0x2a,
	LCM_CMD(0xc4, 2), 0x8d,0xee,
	LCM_CMD(0xc5, 1), 0x27,
	LCM_CMD(0xe0, 16), 0x07,0x3f,0x0d,0x07,
		0x14,0x0f,0x08,0x0e, 0x0e,0x0c,0x18,0x24, 0x00,0x0b,0x03,0x1f,
	LCM_CMD(0xe1, 16), 0x01,0x3f,0x01,0x00,
		0x07,0x03,0x04,0x0c, 0x10,0x14,0x23,0x2e, 0x00,0x00,0x05,0x1f,
	//LCM_CMD(0x2a, 4), 0x00,0x00,0x00,0x7f,
	//LCM_CMD(0x2b, 4), 0x00,0x00,0x00,0x9f,
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	//LCM_CMD(0x36, 1), 0xd0, // Memory Access Control
	LCM_CMD(0x21, 0), // Display Inversion On
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd8376_nokia_init[] = {
	LCM_CMD(0xf0, 1), 0x11,
	LCM_CMD(0xd6, 1), 0xcb,
	LCM_CMD(0xb1, 3), 0x05,0x4a,0x4a,
	LCM_CMD(0xb2, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb3, 6), 0x05,0x3c,0x3c,0x05,0x3c,0x3c,
	LCM_CMD(0xb4, 2), 0x03,0x02,
	LCM_CMD(0xc0, 3), 0xa1,0x04,0x84,
	LCM_CMD(0xc1, 1), 0xc4,
	LCM_CMD(0xc2, 2), 0x0d,0x00,
	LCM_CMD(0xc3, 2), 0x8d,0x2a,
	LCM_CMD(0xc4, 2), 0x8d,0xee,
	LCM_CMD(0xc5, 1), 0x27,
	LCM_CMD(0xe0, 16), 0x07,0x3f,0x0d,0x07,
		0x14,0x0f,0x08,0x0e, 0x0e,0x0c,0x18,0x24, 0x00,0x0b,0x03,0x1f,
	LCM_CMD(0xe1, 16), 0x01,0x3f,0x01,0x00,
		0x07,0x03,0x04,0x0c, 0x10,0x14,0x23,0x2e, 0x00,0x00,0x05,0x1f,
	//LCM_CMD(0x2a, 4), 0x00,0x00,0x00,0x7f,
	//LCM_CMD(0x2b, 4), 0x00,0x00,0x00,0x9f,
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	//LCM_CMD(0x36, 1), 0xd0, // Memory Access Control
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd9307_qlyx_init[] = {
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	//LCM_CMD(0x36, 1), 0x48, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0x21, 0),
	LCM_CMD(0x86, 1), 0x98,
	LCM_CMD(0x89, 1), 0x03,
	LCM_CMD(0x8b, 1), 0x84,
	LCM_CMD(0x8d, 1), 0x33,
	LCM_CMD(0x8e, 1), 0x0f,
	LCM_CMD(0xe8, 2), 0x12,0x00, // Frame Rate
	LCM_CMD(0xff, 1), 0x62,
	LCM_CMD(0x99, 1), 0x3e,
	LCM_CMD(0x9d, 1), 0x4b,
	LCM_CMD(0x98, 1), 0x3e,
	LCM_CMD(0x9c, 1), 0x4b,
	LCM_CMD(0xc3, 1), 0x30,
	LCM_CMD(0xc4, 1), 0x2c,
	LCM_CMD(0xc9, 1), 0x09,
	LCM_CMD(0xf0, 6), 0x80,0x00,0x0f,0x0e,0x08,0x31,
	LCM_CMD(0xf1, 6), 0x47,0x77,0x96,0x1f,0x23,0xaf,
	LCM_CMD(0xf2, 6), 0x41,0x00,0x12,0x12,0x0c,0x2e,
	LCM_CMD(0xf3, 6), 0x3e,0xb8,0x96,0x0d,0x10,0xdf,
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x44, 2), 0x00,0x70, // Set Tear Scanline
#if SPI_MODE2
	LCM_CMD(0xe9, 1), 0x08, // SPI 2DATA control
#endif
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd9306_qlyx_init[] = {
	//LCM_DELAY(10),
	//LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	//LCM_CMD(0x36, 1), 0x48, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0x20, 0),
	LCM_CMD(0x38, 0),
	LCM_CMD(0x13, 0),
	LCM_CMD(0xa4, 2), 0x44,0x44,
	LCM_CMD(0xa5, 2), 0x42,0x42,
	LCM_CMD(0xac, 1), 0x00,
	LCM_CMD(0xaf, 1), 0x55,
	LCM_CMD(0xe1, 2), 0x10,0x26,
	LCM_CMD(0xe3, 2), 0x01,0x10,
	LCM_CMD(0xe8, 2), 0x11,0x77, // Frame Rate
	LCM_CMD(0xe0, 1), 0x0f,
	LCM_CMD(0xe4, 1), 0x00,
	LCM_CMD(0xe5, 1), 0x00,
	LCM_CMD(0xe6, 1), 0x00,
	LCM_CMD(0xe7, 2), 0x00,0x00,
	LCM_CMD(0xea, 7), 0x51,0x95,0x00,0x00,0x00,0x00,0x00,
	LCM_CMD(0xeb, 1), 0x30,
	LCM_CMD(0xec, 3), 0x33,0x22,0x88,
	LCM_CMD(0xed, 2), 0x18,0x08,
	LCM_CMD(0xee, 1), 0x00,
	LCM_CMD(0xa0, 1), 0x00,
	LCM_CMD(0xa1, 1), 0x00,
	LCM_CMD(0xa2, 1), 0x00,
	LCM_CMD(0xa3, 1), 0x00,
	LCM_CMD(0xab, 2), 0x00,0x00,
	LCM_CMD(0xad, 1), 0x33,
	LCM_CMD(0xae, 1), 0x2b,
	LCM_CMD(0xde, 1), 0x00,
	LCM_CMD(0xff, 1), 0x61,
	LCM_CMD(0xdf, 1), 0x08,
	LCM_CMD(0xb6, 3), 0x00,0x80,0x27,
	LCM_CMD(0xfd, 1), 0x00,
	LCM_CMD(0xa6, 2), 0x29,0x29,
	LCM_CMD(0xa7, 2), 0x27,0x27,
	LCM_CMD(0xa8, 2), 0x17,0x17,
	LCM_CMD(0xa9, 2), 0x26,0x26,
	LCM_CMD(0x35, 1), 0x00,
	LCM_CMD(0x44, 2), 0x00,0x70,
#if SPI_MODE2
	LCM_CMD(0xe9, 1), 0x08, // SPI 2DATA control
#endif
	LCM_CMD(0xf0, 6), 0x02,0x02,0x00,0x03,0x09,0x0c,
	LCM_CMD(0xf1, 6), 0x01,0x03,0x00,0x04,0x12,0x13,
	LCM_CMD(0xf2, 6), 0x0c,0x07,0x34,0x03,0x04,0x46,
	LCM_CMD(0xf3, 6), 0x14,0x0b,0x42,0x04,0x05,0x50,
	LCM_CMD(0xf4, 6), 0x09,0x13,0x13,0x1e,0x22,0x0f,
	LCM_CMD(0xf5, 6), 0x08,0x0e,0x0e,0x22,0x2b,0x0f,
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd88B6_nokia_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0xb2, 5), 0x0c,0x0c,0x00,0x33,0x33,
	LCM_CMD(0x35, 1), 0x00,
	//LCM_CMD(0x36, 1), 0x00, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0xb7, 1), 0x56,
#if SPI_MODE2
	LCM_CMD(0xe7, 1), 0x10, // SPI2 Enable
#endif
	LCM_CMD(0xbb, 1), 0x0c,
	LCM_CMD(0xc0, 1), 0x2c,
	LCM_CMD(0xc2, 1), 0x01,
	LCM_CMD(0xc3, 1), 0x0f,
	LCM_CMD(0xc6, 1), 0x0f,
	LCM_CMD(0xd0, 1), 0xa7,
	LCM_DELAY(10),
	LCM_CMD(0xd0, 2), 0xa4,0xa1,
	LCM_CMD(0xd6, 1), 0xa1,
	// Set Gamma 1
	LCM_CMD(0xe0, 14), 0xf0,0x01,0x08,0x04,
		0x05,0x14,0x33,0x44, 0x49,0x36,0x11,0x14, 0x2e,0x36,
	// Set Gamma 2
	LCM_CMD(0xe1, 14), 0xf0,0x0c,0x10,0x0e,
		0x0c,0x08,0x32,0x43, 0x49,0x28,0x12,0x12, 0x2c,0x33,
	LCM_CMD(0x21, 0),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd3001_philips_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0xfd, 2), 0x06,0x08, // Private access (enter)
	LCM_CMD(0x61, 2), 0x07,0x07,
	LCM_CMD(0x73, 1), 0x70,
	LCM_CMD(0x73, 1), 0x00,
	LCM_CMD(0x62, 3), 0x00,0x44,0x40,
	LCM_CMD(0x63, 4), 0x41,0x06,0x12,0x12,
	LCM_CMD(0x64, 1), 0x35,
	LCM_CMD(0x65, 3), 0x09,0x10,0x21,
	LCM_CMD(0x66, 3), 0x09,0x10,0x21,
	LCM_CMD(0x67, 2), 0x20,0x20,
	LCM_CMD(0x68, 4), 0x9d,0x4c,0x41,0x21,
	LCM_CMD(0xb1, 3), 0x0f,0x02,0x01,
	LCM_CMD(0xb4, 1), 0x01,
	LCM_CMD(0xb5, 4), 0x02,0x02,0x0a,0x14,
	LCM_CMD(0xb6, 5), 0x04,0x00,0x9f,0x00,0x02,
	LCM_CMD(0xe6, 2), 0x00,0xff,
	LCM_CMD(0xe7, 6), 0x01,0x04,0x03,0x03,0x00,0x12,
	LCM_CMD(0xec, 1), 0x52,
	LCM_CMD(0xdf, 1), 0x11,
	LCM_CMD(0xe8, 3), 0x00,0x70,0x00,
	LCM_CMD(0xe2, 6), 0x1a,0x14,0x14,0x1e,0x1b,0x3f,
	LCM_CMD(0xe5, 6), 0x3f,0x1c,0x1d,0x12,0x13,0x1a,
	LCM_CMD(0xe1, 2), 0x39,0x6c,
	LCM_CMD(0xe4, 2), 0x69,0x32,
	LCM_CMD(0xe0, 8), 0x08,0x0d,0x10,0x12,0x14,0x10,0x11,0x14,
	LCM_CMD(0xe3, 8), 0x16,0x13,0x15,0x16,0x15,0x12,0x0c,0x08,
#if SPI_MODE2
	LCM_CMD(0xf6, 4), 0x01,0x30,0x00,0x40, // Interface control
#else
	LCM_CMD(0xf6, 4), 0x01,0x30,0x00,0x00, // Interface control
#endif
	LCM_CMD(0xf1, 3), 0x01,0x6a,0x6b,
	LCM_CMD(0xfd, 2), 0xfa,0xfc, // Private access (exit)
	LCM_CMD(0x3a, 1), 0x55, // Pixel Format Set
	LCM_CMD(0x35, 1), 0x00,
	//LCM_CMD(0x36, 1), 0x00, // Memory Access Control
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

#define LCD_CONFIG(id, w,h, mac, a,b,c,d,e,f, spi, name) \
	{ id, ~0, w,h, mac, { a,b,c,d,e,f }, { spi }, name##_init },
#define X(...) LCD_CONFIG(__VA_ARGS__)
#define NO_TIMINGS 0,0,0,0,0,0

static const lcd_config_t lcd_config_t117[] = {
/* CHAKEYAKE T190 */

	// GlaxyCore GC9106
	X(0x009106, 128,160, 0xd0, 60,120,75,40,50,50, 0, cmd9106_chakeyake)

/* Inoi 140 Classic Lite 4G */

	// Sitronix ST7735S
	X(0x7c89f0, 128,160, 0xd8, 20,150,150,35,70,70, 0, cmd7C89F0_inoi)

/* BQ 1800L One */

	// GlaxyCore GC9106
	X(0x80009106, 128,160, 0xd0, 30,150,150,40,50,50, 0, cmd9106_bq)

/* IPRO K6 */

	// GlaxyCore GC9306
	X(0x009306, 240,320, 0x48, 30,150,150,40,50,50, 0, cmd9306_ipro)

/* i-TOP P100 */

	// GlaxyCore GC9307
	X(0x009307, 240,320, 0x48, 30,150,150,40,50,50, 0, cmd9307_itop)

/* FW: L400_JS_K18B_ISR_V15 */

	// Sitronix ST7789V3A
	X(0x898966, 240,320, 0x00, 50,55,110,20,70,35, 0, cmd8966_unknown)

/* Nokia 110 4G (TA-1543) */

	// Sitronix ST7735P3 LX HKC
	X(0x773503, 128,160, 0xd0, NO_TIMINGS, 48000000, cmd7735_nokia)

/* Nokia 106 4G (TA-1553) */

	// Sitronix ST7735P3 HKC
	X(0x83760f, 128,160, 0xd0, NO_TIMINGS, 48000000, cmd8376_nokia)

/* QLYX Q8 */

	// GlaxyCore GC9307
	X(0x009307, 240,320, 0x48, NO_TIMINGS, 48000000, cmd9307_qlyx)

/* QLYX Q7 */

	// GlaxyCore GC9306
	X(0x009306, 240,320, 0x48, NO_TIMINGS, 48000000, cmd9306_qlyx)

/* Nokia 220 4G (TA-1617) */

	// Sitronix ST7789P3 SL BOE
	X(0x8888b6, 240,320, 0x00, NO_TIMINGS, 24000000, cmd88B6_nokia)

/* Philips Xenium E6500 */

	// NewVision NV3030B
	X(0x303001, 240,320, 0x00, NO_TIMINGS, 48000000, cmd3001_philips)
};
#undef X
#undef NO_TIMINGS

// SC6531E

static const uint8_t cmd8585_init[] = {
	LCM_DELAY(120),
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	//LCM_CMD(0x36, 1), 0x00, // Memory Access Control
	LCM_CMD(0xb2, 5), 0x0c,0x0c,0x00,0x33,0x33, // Porch Setting
	LCM_CMD(0xb7, 1), 0x35, // Gate Control
	LCM_CMD(0xbb, 1), 0x2b, // VCOM Setting
	LCM_CMD(0xc0, 1), 0x2c, // LCM Control
	LCM_CMD(0xc2, 1), 0x01,
	LCM_CMD(0xc3, 1), 0x17,
	LCM_CMD(0xc4, 1), 0x20,
	LCM_CMD(0xc6, 1), 0x0b,
	LCM_CMD(0xca, 1), 0x0f,
	LCM_CMD(0xc8, 1), 0x08,
	// Write Content Adaptive Brightness Control and Color Enhancement
	LCM_CMD(0x55, 1), 0x90,
	LCM_CMD(0xd0, 2), 0xa4,0xa1, // Power Control 1
	LCM_CMD(0x3a, 1), 0x55, // Interface Pixel Format
	// Positive Voltage Gamma Control
	LCM_CMD(0xe0, 14), 0xf0,0x00,0x0a,0x10,
		0x12,0x1b,0x39,0x44, 0x47,0x28,0x12,0x10, 0x16,0x1b,
	// Negative Voltage Gamma Control
	LCM_CMD(0xe1, 14), 0xf0,0x00,0x0a,0x10,
		0x11,0x1a,0x3b,0x34, 0x4e,0x3a,0x17,0x16, 0x21,0x22,
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

#if 0
static const uint8_t cmd8585_off[] = {
	LCM_CMD(0x28, 0), // Display OFF
	LCM_DELAY(50),
	LCM_CMD(0x10, 0), // Enter Sleep Mode
	LCM_DELAY(50),
	LCM_END
};
#endif

static const uint8_t cmd9305_init[] = {
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	//LCM_CMD(0x36, 1), 0x48, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0x35, 1), 0x00,
	LCM_CMD(0x44, 2), 0x00,0x30,
	LCM_CMD(0xa4, 2), 0x44,0x44, // Vcore voltage Control
	LCM_CMD(0xa5, 2), 0x42,0x42,
	LCM_CMD(0xaa, 2), 0x88,0x88,
	LCM_CMD(0xe8, 2), 0x12,0x0b, // Frame Rate
	LCM_CMD(0xe3, 2), 0x01,0x10,
	LCM_CMD(0xff, 1), 0x61,
	LCM_CMD(0xac, 1), 0x00,
	LCM_CMD(0xae, 1), 0x2b,
	LCM_CMD(0xad, 1), 0x33,
	LCM_CMD(0xaf, 1), 0x55,
	LCM_CMD(0xa6, 2), 0x2a,0x2a, // Vreg1a voltage Control
	LCM_CMD(0xa7, 2), 0x2b,0x2b, // Vreg1b voltage Control
	LCM_CMD(0xa8, 2), 0x18,0x18, // Vreg2a voltage Control
	LCM_CMD(0xa9, 2), 0x2a,0x2a, // Vreg2b voltage Control
	LCM_CMD(0xf0, 6), 0x02,0x02,0x00,0x08,0x0c,0x10, // Set Gamma 1
	LCM_CMD(0xf1, 6), 0x01,0x00,0x00,0x14,0x1d,0x0e, // Set Gamma 2
	LCM_CMD(0xf2, 6), 0x10,0x09,0x37,0x04,0x04,0x48, // Set Gamma 3
	LCM_CMD(0xf3, 6), 0x10,0x0b,0x3f,0x05,0x05,0x4e, // Set Gamma 4
	LCM_CMD(0xf4, 6), 0x0d,0x19,0x19,0x1d,0x1e,0x0f, // Set Gamma 5
	LCM_CMD(0xf5, 6), 0x06,0x12,0x13,0x1a,0x1b,0x0f, // Set Gamma 6
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd9306_init[] = {
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	//LCM_CMD(0x36, 1), 0x48, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0xad, 1), 0x33, // ???
	LCM_CMD(0xaf, 1), 0x55, // ???
	LCM_CMD(0xae, 1), 0x2b, // ???
	LCM_CMD(0xa4, 2), 0x44,0x44, // Vcore voltage Control
	LCM_CMD(0xa5, 2), 0x42,0x42, // ???
	LCM_CMD(0xaa, 2), 0x88,0x88, // ???
	LCM_CMD(0xae, 1), 0x2b, // ???
	LCM_CMD(0xe8, 2), 0x11,0x0b, // Frame Rate
	LCM_CMD(0xe3, 2), 0x01,0x10, // ???
	LCM_CMD(0xff, 1), 0x61, // ???
	LCM_CMD(0xac, 1), 0x00, // ???
	LCM_CMD(0xaf, 1), 0x67, // ???
	LCM_CMD(0xa6, 2), 0x2a,0x2a, // Vreg1a voltage Control
	LCM_CMD(0xa7, 2), 0x2b,0x2b, // Vreg1b voltage Control
	LCM_CMD(0xa8, 2), 0x18,0x18, // Vreg2a voltage Control
	LCM_CMD(0xa9, 2), 0x2a,0x2a, // Vreg2b voltage Control
	LCM_CMD(0xf0, 6), 0x02,0x00,0x00,0x1b,0x1f,0x0b, // Set Gamma 1
	LCM_CMD(0xf1, 6), 0x01,0x03,0x00,0x28,0x2b,0x0e, // Set Gamma 2
	LCM_CMD(0xf2, 6), 0x0b,0x08,0x3b,0x04,0x03,0x4c, // Set Gamma 3
	LCM_CMD(0xf3, 6), 0x0e,0x07,0x46,0x04,0x05,0x51, // Set Gamma 4
	LCM_CMD(0xf4, 6), 0x08,0x15,0x15,0x1f,0x22,0x0f, // Set Gamma 5
	LCM_CMD(0xf5, 6), 0x0b,0x13,0x11,0x1f,0x21,0x0f, // Set Gamma 6
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd9300_init[] = {
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	//LCM_CMD(0x36, 1), 0x48, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0xa4, 2), 0x44,0x44, // Vcore voltage Control
	LCM_CMD(0xa5, 2), 0x42,0x42,
	LCM_CMD(0xaa, 2), 0x88,0x88,
	LCM_CMD(0xe8, 2), 0x12,0x0b, // Frame Rate
	LCM_CMD(0xe3, 2), 0x01,0x10,
	LCM_CMD(0xff, 1), 0x61,
	LCM_CMD(0xac, 1), 0x00,
	LCM_CMD(0xad, 1), 0x33,
	LCM_CMD(0xae, 1), 0x2b,
	LCM_CMD(0xaf, 1), 0x55,
	LCM_CMD(0xa6, 2), 0x2a,0x2a, // Vreg1a voltage Control
	LCM_CMD(0xa7, 2), 0x2b,0x2b, // Vreg1b voltage Control
	LCM_CMD(0xa8, 2), 0x10,0x10, // Vreg2a voltage Control
	LCM_CMD(0xa9, 2), 0x2a,0x2a, // Vreg2b voltage Control
	LCM_CMD(0x35, 1), 0x00,
	LCM_CMD(0x44, 2), 0x00,0x0a,
	LCM_CMD(0xf0, 6), 0x02,0x00,0x00,0x0a,0x0e,0x10, // Set Gamma 1
	LCM_CMD(0xf1, 6), 0x01,0x02,0x00,0x28,0x35,0x0f, // Set Gamma 2
	LCM_CMD(0xf2, 6), 0x10,0x09,0x35,0x03,0x03,0x43, // Set Gamma 3
	LCM_CMD(0xf3, 6), 0x11,0x0b,0x54,0x05,0x03,0x60, // Set Gamma 4
	LCM_CMD(0xf4, 6), 0x0c,0x17,0x16,0x11,0x12,0x0f, // Set Gamma 5
	LCM_CMD(0xf5, 6), 0x08,0x17,0x17,0x2a,0x2a,0x0f, // Set Gamma 6
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

#if 0
static const uint8_t cmd93xx_off[] = {
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	LCM_CMD(0x28, 0), // Display OFF
	LCM_DELAY(120),
	LCM_CMD(0x10, 0), // Enter Sleep Mode
	LCM_DELAY(120),
	LCM_END
};
#endif

static const uint8_t cmd9102_init[] = {
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	//LCM_CMD(0x36, 1), 0xd0, // Memory Access Control
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	LCM_CMD(0xa8, 1), 0x02, // ???
	LCM_CMD(0xa7, 1), 0x02, // ???
	LCM_CMD(0xea, 1), 0x3a, // ???
	LCM_CMD(0xb4, 1), 0x00, // Display Inversion Control
	LCM_CMD(0xff, 1), 0x0b, // Power Control 4
	LCM_CMD(0xfd, 1), 0x04, // Power Control 3
	LCM_CMD(0xe3, 1), 0x07, // ???
	LCM_CMD(0xa4, 1), 0x08,	// Power Control 1
	LCM_CMD(0xa3, 3), 0x07,0x16,0x16, // Frame Rate
	LCM_CMD(0xe7, 2), 0x94,0x88, // ???
	LCM_CMD(0xed, 1), 0x11, // Power Control 2
	LCM_CMD(0xe4, 1), 0xc5, // ???
	LCM_CMD(0xe2, 1), 0x80, // ???
	LCM_CMD(0xe5, 1), 0x10, // ???

	LCM_CMD(0xf0, 1), 0x55,	// Set Gamma 1
	LCM_CMD(0xf1, 1), 0x37,	// Set Gamma 2
	LCM_CMD(0xf2, 1), 0x01,	// Set Gamma 3
	LCM_CMD(0xf3, 1), 0x52,	// Set Gamma 4
	LCM_CMD(0xf4, 1), 0x00,	// Set Gamma 5
	LCM_CMD(0xf5, 1), 0x00,	// Set Gamma 6
	// 0xf6 skipped
	LCM_CMD(0xf7, 1), 0x67,	// Set Gamma 7
	LCM_CMD(0xf8, 1), 0x22, // Set Gamma 8
	LCM_CMD(0xf9, 1), 0x54,	// Set Gamma 9
	LCM_CMD(0xfa, 1), 0x05,	// Set Gamma 10
	LCM_CMD(0xfb, 1), 0x00,	// Set Gamma 11
	LCM_CMD(0xfc, 1), 0x00,	// Set Gamma 12

	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(200),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd9106_init[] = {
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	LCM_CMD(0xb3, 1), 0x03, // ???
	LCM_CMD(0xb6, 1), 0x01, // ???
	LCM_CMD(0xa3, 1), 0x11, // Frame Rate
	LCM_CMD(0x21, 0), // Display Inversion ON
	//LCM_CMD(0x36, 1), 0x00, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0xb4, 1), 0x21, // Display Inversion Control
	// Set Gamma 1
	LCM_CMD(0xf0, 14), 0x31,0x4c,0x24,0x58,
		0xa8,0x26,0x28,0x00, 0x2c,0x0c,0x0c,0x15, 0x15,0x0f,
	// Set Gamma 2
	LCM_CMD(0xf1, 14), 0x0e,0x2d,0x24,0x3e,
		0x99,0x12,0x13,0x00, 0x0a,0x0d,0x0d,0x14, 0x13,0x0f,
	//LCM_CMD(0xfe, 0), // Inter Register Enable 1
	//LCM_CMD(0xff, 0), // ???
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	//LCM_DELAY(120),
	LCM_END
};

static const uint8_t cmd9106_prestigio_init[] = {
	//LCM_DELAY(120),
	//LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	LCM_CMD(0xb3, 1), 0x03, // ???
	LCM_CMD(0xb6, 1), 0x11, // ???
	LCM_CMD(0xac, 1), 0x0b,
	LCM_CMD(0xa3, 1), 0x07, // Frame Rate
	LCM_CMD(0x21, 0), // Display Inversion ON
	//LCM_CMD(0x36, 1), 0xd0, // Memory Access Control
	LCM_CMD(0x35, 1), 0x00,
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0xb4, 1), 0x21, // Display Inversion Control
	// Set Gamma 1
	LCM_CMD(0xf0, 14), 0x08,0x5e,0x2d,0x6c,
		0xbe,0x37,0x36,0x00, 0x07,0x10,0x10,0x17, 0x15,0x0f,
	// Set Gamma 2
	LCM_CMD(0xf1, 14), 0x05,0x21,0x24,0x30,
		0xaa,0x00,0x01,0x00, 0x02,0x16,0x19,0x16, 0x15,0x0f,
	//LCM_CMD(0xfe, 0), // Inter Register Enable 1
	//LCM_CMD(0xff, 0), // ???
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_DELAY(10),
	//LCM_CMD(0x2c, 0),
	LCM_END
};

static const uint8_t cmd1C80F3_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	//LCM_CMD(0x36, 1), 0xd8, // Memory Access Control
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x26, 1), 0x01, // Gamma Set
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd1529_init[] = {
	//LCM_DELAY(100),
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(200),
	// Manufacturer Command Access Protect
	LCM_CMD(0xb0, 1), 0x04,
	LCM_CMD(0xb3, 5), 0x02,0x00,0x00,0x00,0x00,
	// Display mode and Frame memory write mode
	LCM_CMD(0xb4, 1), 0x00,
	// Panel Driving Setting
	LCM_CMD(0xc0, 8), 0x03,0xdf,0x40,0x10,0x00,0x01,0x00,0x55,
	// Display Timing Setting for Normal Mode
	LCM_CMD(0xc1, 5), 0x07,0x27,0x08,0x08,0x00,
	// Source/Gate Driving Timing Setting
	LCM_CMD(0xc4, 4), 0x57,0x00,0x05,0x03,
	// DPI polarity Control
	LCM_CMD(0xc6, 1), 0x04,
#define GAMMA 0x03,0x12,0x1a,0x24, 0x32,0x4b,0x3b,0x29, 0x1f,0x18,0x12,0x04
	// Gamma Setting A set
	LCM_CMD(0xc8, 24), GAMMA, GAMMA,
	// Gamma Setting B set
	LCM_CMD(0xc9, 24), GAMMA, GAMMA,
	// Gamma Setting C set
	LCM_CMD(0xca, 24), GAMMA, GAMMA,
#undef GAMMA
	LCM_CMD(0xd0, 16),	// Power Setting
		0x99,0x06,0x08,0x20, 0x29,0x04,0x01,0x00,
		0x08,0x01,0x00,0x06, 0x01,0x00,0x00,0x20,
	// VCOM Setting
	LCM_CMD(0xd1, 4), 0x00,0x28,0x28,0x15,
	// NVM Access Control
	//LCM_CMD(0xe0, 3), 0x00,0x00,0x00,
	//LCM_CMD(0xe1, 6), 0x00,0x00,0x00,0x00,0x00,0x00,
	// NVM Load Control
	//LCM_CMD(0xe2, 1), 0x00,
	//LCM_CMD(0x36, 1), 0x00, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x55, // Pixel Format Set
	//LCM_CMD(0x2a, 4), 0x00,0x00,0x01,0x3f,
	//LCM_CMD(0x2b, 4), 0x00,0x00,0x01,0xdf,
	LCM_CMD(0x29, 0), // Display ON
	LCM_DELAY(120),
	//LCM_CMD(0x2c, 0),
	LCM_END
};

static const uint8_t cmd3033_init[] = {
	LCM_CMD(0x01, 0), // Software Reset
	LCM_DELAY(300),
	LCM_CMD(0xfd, 2), 0x06,0x07, // Extended command
	LCM_CMD(0x66, 1), 0x80, // Power control 3
	LCM_CMD(0x80, 1), 0x05,
	LCM_DELAY(5),
	LCM_CMD(0x80, 1), 0x01,
	LCM_DELAY(100),
	LCM_CMD(0xb6, 2), 0x02,0xa2, // Display function control
	LCM_CMD(0x60, 1), 0x26, // Power control 0
	LCM_CMD(0x63, 1), 0x08,
	LCM_CMD(0x64, 1), 0x0c, // Power control 1
	LCM_CMD(0x68, 1), 0x70,
	LCM_CMD(0x69, 1), 0x1a, // Power control 4
	LCM_CMD(0x6a, 1), 0xc4, // Power control 5
	LCM_CMD(0x6b, 1), 0x1e, // Vcom control 1
	LCM_CMD(0x6c, 1), 0x1a, // Vcom control 2
	LCM_CMD(0x6d, 1), 0x77,
	LCM_CMD(0x6e, 1), 0x84, // Power control 6
	LCM_CMD(0x6f, 1), 0x48,
	LCM_CMD(0xf7, 1), 0x10, // lcd ac drive control
	LCM_CMD(0x70, 1), 0x44,
	LCM_CMD(0x71, 1), 0x05, // Power control 7
	// Source, VCOM driver timing
	LCM_CMD(0xed, 6), 0xf9,0xf9,0x00,0x00,0x11,0x00,

	// Gamma control 1-6
	LCM_CMD(0xe0, 7), 0x0d,0x17,0x0d,0x1f,0x03,0x0d,0x17,
	LCM_CMD(0xe1, 2), 0x28,0x58,
	LCM_CMD(0xe2, 6), 0x1b,0x25,0x24,0x11,0x0a,0x17,
	LCM_CMD(0xe3, 7), 0x07,0x13,0x01,0x13,0x08,0x13,0x07,
	LCM_CMD(0xe4, 2), 0x08,0x4c,
	LCM_CMD(0xe5, 6), 0x17,0x24,0x1c,0x19,0x1a,0x1f,

	LCM_CMD(0x66, 1), 0x9c, // Power control 3
	LCM_CMD(0x67, 1), 0x07,
	LCM_CMD(0xb1, 2), 0x00,0x12, // Frame rate control 1
	// Gate driver timing
	LCM_CMD(0xec, 6), 0x33,0x16,0x16,0x00,0x18,0x18,
	LCM_CMD(0xf6, 3), 0x01,0x10,0x00, // Interface control
	LCM_CMD(0xfd, 2), 0xfa,0xfb, // Extended command
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(300),
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x44, 2), 0x00,0x3f, // Set Tear Scanline
	//LCM_CMD(0x36, 1), 0x08, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x65, // Pixel Format Set
	LCM_CMD(0x29, 0), // Display ON
	LCM_DELAY(10),
	LCM_END
};

static const uint8_t cmd80F6_init[] = {
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	LCM_CMD(0x13, 0), // Normal Display Mode ON
	LCM_CMD(0x38, 0), // Idle Mode OFF
	LCM_CMD(0x20, 0), // Display Inversion OFF
	//LCM_CMD(0x36, 1), 0x00, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x44, 2), 0x00,0x10, // Set Tear Scanline
	LCM_CMD(0x89, 1), 0x0b,
	LCM_CMD(0xeb, 1), 0x02,
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd8552_init[] = {
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	//LCM_CMD(0x36, 1), 0x00, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x55, // Pixel Format Set
	LCM_CMD(0xb2, 5), 0x0c,0x0c,0x00,0x33,0x33, // Porch Setting
	LCM_CMD(0xb7, 1), 0x35, // Gate Control
	LCM_CMD(0xbb, 1), 0x35, // VCOM Setting
	LCM_CMD(0xc0, 1), 0x2c, // LCM Control
	LCM_CMD(0xc2, 1), 0x01, // VDV and VRH Command Enable
	LCM_CMD(0xc3, 1), 0x0b, // VRH Set
	LCM_CMD(0xc4, 1), 0x20, // VDV Set
	LCM_CMD(0xc6, 1), 0x0b, // Frame Rate Control in Normal Mode
	LCM_CMD(0xd0, 2), 0xa4,0xa1, // Power Control 1
	// Set Gamma 1
	LCM_CMD(0xe0, 14), 0xd0,0x00,0x02,0x07,
		0x0b,0x1a,0x31,0x54, 0x40,0x29,0x12,0x12, 0x12,0x17,
	// Set Gamma 2
	LCM_CMD(0xe1, 14), 0xd0,0x00,0x02,0x07,
		0x05,0x25,0x2d,0x44, 0x45,0x1c,0x18,0x16, 0x1c,0x1d,
	LCM_CMD(0x44, 2), 0x00,0x08, // Set Tear Scanline
	LCM_CMD(0x35, 1), 0x01, // Tearing Effect Line ON
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd9304_init[] = {
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	//LCM_CMD(0x36, 1), 0x48, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x55, // Pixel Format Set
	LCM_CMD(0xe8, 2), 0x1f,0x40, // Frame Rate
	LCM_CMD(0x35, 1), 0x01, // Tearing Effect Line ON
	LCM_CMD(0x44, 2), 0x00,0x08, // Set Tear Scanline
	LCM_CMD(0xe3, 2), 0x01,0x04,
	LCM_CMD(0xa5, 2), 0x40,0x40,
	LCM_CMD(0xa4, 2), 0x44,0x44, // Vcore voltage Control
	LCM_CMD(0xab, 1), 0x08,
	LCM_CMD(0xaa, 2), 0x88,0x88,
	LCM_CMD(0xae, 1), 0x0b,
	LCM_CMD(0xac, 1), 0x00,
	LCM_CMD(0xaf, 1), 0x77,
	LCM_CMD(0xad, 1), 0x77,
	LCM_CMD(0xf0, 6), 0x02,0x00,0x00,0x00,0x03,0x08, // Set Gamma 1
	LCM_CMD(0xf1, 6), 0x01,0x03,0x00,0x00,0x05,0x0c, // Set Gamma 2
	LCM_CMD(0xf2, 6), 0x0a,0x07,0x32,0x05,0x05,0x46, // Set Gamma 3
	LCM_CMD(0xf3, 6), 0x0d,0x09,0x3a,0x04,0x04,0x4b, // Set Gamma 4
	LCM_CMD(0xf4, 6), 0x0e,0x17,0x15,0x1b,0x1e,0x00, // Set Gamma 5
	LCM_CMD(0xf5, 6), 0x0c,0x1a,0x1c,0x17,0x1a,0x00, // Set Gamma 6
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd90FA_init[] = {
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x13, 0), // Normal Display Mode ON
	LCM_CMD(0x38, 0), // Idle Mode OFF
	LCM_CMD(0x20, 0), // Display Inversion OFF
	//LCM_CMD(0x36, 1), 0x00, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd9290F6_init[] = {
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	//LCM_CMD(0x36, 1), 0x00, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd83760F_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0xb1, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb2, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb3, 6), 0x05,0x3c,0x3c,0x05,0x3c,0x3c,
	LCM_CMD(0xb4, 2), 0x03,0x02,
	LCM_CMD(0xc0, 3), 0xa4,0x04,0x84,
	LCM_CMD(0xc1, 1), 0xc4,
	LCM_CMD(0xc2, 2), 0x0d,0x00,
	LCM_CMD(0xc3, 2), 0x8d,0x2a,
	LCM_CMD(0xc4, 2), 0x8d,0xee,
	LCM_CMD(0xc5, 1), 0x04,
	// Set Gamma 1
	LCM_CMD(0xe0, 16), 0x05,0x19,0x14,0x17,0x3d,0x38,0x2e,0x2f,
		0x2d,0x29,0x31,0x3b,0x00,0x03,0x00,0x10,
	// Set Gamma 2
	LCM_CMD(0xe1, 16), 0x04,0x15,0x0e,0x10,0x31,0x2d,0x29,0x2d,
		0x2b,0x28,0x2e,0x39,0x00,0x01,0x02,0x10,
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	//LCM_CMD(0x36, 1), 0xd0, // Memory Access Control
	LCM_CMD(0x21, 0),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

// differs from the previous one in color inversion
static const uint8_t cmd83760F_texet_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0x11, 0),
	LCM_DELAY(120),
	LCM_CMD(0xb1, 3), 0x05,0x3a,0x3a,
	LCM_CMD(0xb2, 3), 0x05,0x3a,0x3a,
	LCM_CMD(0xb3, 6), 0x05,0x3a,0x3a,0x05,0x3a,0x3a,
	LCM_CMD(0xb4, 1), 0x03,
	LCM_CMD(0xc0, 3), 0xc0,0x0e,0x84,
	LCM_CMD(0xc1, 1), 0xc4,
	LCM_CMD(0xc2, 2), 0x0d,0x00,
	LCM_CMD(0xc3, 2), 0x8d,0x2a,
	LCM_CMD(0xc4, 2), 0x8d,0xee,
	LCM_CMD(0xc5, 1), 0x02,
	//LCM_CMD(0x36, 1), 0xc8, // Memory Access Control
	// Set Gamma 1
	LCM_CMD(0xe0, 16), 0x17,0x1f,0x04,0x07,0x14,0x11,0x0e,0x17,
		0x1d,0x25,0x36,0x3f,0x10,0x15,0x02,0x00,
	// Set Gamma 2
	LCM_CMD(0xe1, 16), 0x15,0x1c,0x05,0x04,0x11,0x0f,0x0c,0x15,
		0x1b,0x22,0x2f,0x3f,0x10,0x12,0x00,0x00,
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0x29, 0), // Display ON
	//LCM_DELAY(120)
	LCM_END
};

static const uint8_t cmd333025_f197_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0xff, 1), 0xa5,
	LCM_CMD(0x3e, 1), 0x08,
	LCM_CMD(0x3a, 1), 0x65, // Pixel Format Set
	LCM_CMD(0x82, 1), 0x00,
	LCM_CMD(0x98, 1), 0x00,
	LCM_CMD(0x63, 1), 0x0f,
	LCM_CMD(0x64, 1), 0x0f,
	LCM_CMD(0xb4, 1), 0x54,
	LCM_CMD(0xb5, 1), 0x30,
	LCM_CMD(0x83, 1), 0x03,
	LCM_CMD(0x86, 1), 0x04,
	LCM_CMD(0x87, 1), 0x16,
	LCM_CMD(0x88, 1), 0x09,
	LCM_CMD(0x89, 1), 0x2f,
	LCM_CMD(0x93, 1), 0x63,
	LCM_CMD(0x96, 1), 0x81,
	LCM_CMD(0xc3, 1), 0x11,
	LCM_CMD(0xe6, 1), 0x00,
	LCM_CMD(0x99, 1), 0x01,

#define X(i, a, b, c, d) \
	LCM_CMD(i, 1), a, \
	LCM_CMD(i + 1, 1), b, \
	LCM_CMD(i + 2, 1), c, \
	LCM_CMD(i + 3, 1), d
	// Gamma?
	X(0x70, 0x07,0x21,0x0a,0x10),
	X(0x74, 0x17,0x1a,0x3f,0x09),
	X(0x78, 0x05,0x3f,0x05,0x0c),
	X(0x7c, 0x12,0x0a,0x0a,0x08),
	// Gamma?
	X(0xa0, 0x0b,0x30,0x09,0x0c),
	X(0xa4, 0x08,0x22,0x40,0x04),
	X(0xa8, 0x05,0x3f,0x0a,0x11),
	X(0xac, 0x0d,0x06,0x3b,0x07),
#undef X

	LCM_CMD(0xff, 1), 0x00,
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(200),
	//LCM_CMD(0x36, 1), 0x00, // Memory Access Control
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd9308_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	//LCM_CMD(0x36, 1), 0x90, // Memory Access Control
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x44, 2), 0x00,0x00,
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0x85, 1), 0xe1,
	LCM_CMD(0x86, 1), 0x98,
	LCM_CMD(0x87, 1), 0x28,
	LCM_CMD(0x88, 1), 0x02,
	LCM_CMD(0x89, 1), 0x11,
	LCM_CMD(0x8b, 1), 0x80,
	LCM_CMD(0x8d, 1), 0xfb,
	LCM_CMD(0x8e, 1), 0x0f,
	LCM_CMD(0xbe, 1), 0x11,
	LCM_CMD(0xbd, 1), 0x25,
	LCM_CMD(0xcb, 1), 0x32,
	LCM_CMD(0xcd, 1), 0x32,
	LCM_CMD(0xec, 3), 0x33,0x05,0xcc,
	LCM_CMD(0x98, 1), 0x3e,
	LCM_CMD(0x9c, 1), 0x4b,
	LCM_CMD(0x99, 1), 0x3e,
	LCM_CMD(0x9d, 1), 0x4b,
	LCM_CMD(0x9b, 1), 0x86,
	LCM_CMD(0x9e, 1), 0xda,
	LCM_CMD(0x9f, 1), 0xda,
	LCM_CMD(0xe8, 2), 0x12,0xa0,
	LCM_CMD(0xe1, 2), 0x1a,0x28,
	LCM_CMD(0xff, 1), 0x61,
	LCM_CMD(0xc3, 1), 0x20,
	LCM_CMD(0xc4, 1), 0x03,
	LCM_CMD(0xc9, 1), 0x2a,
	LCM_CMD(0xf0, 6), 0x87,0x05,0x0f,0x12,0x0a,0x50, // Set Gamma 1
	LCM_CMD(0xf2, 6), 0x40,0x05,0x00,0x06,0x06,0x3c, // Set Gamma 3
	LCM_CMD(0xf1, 6), 0x61,0x77,0x95,0x36,0x38,0xde, // Set Gamma 2
	LCM_CMD(0xf3, 6), 0x4b,0x74,0x94,0x16,0x1a,0x4e, // Set Gamma 4
	LCM_CMD(0xba, 1), 0x0a,
	//LCM_CMD(0xfe, 0), // Inter Register Enable 1
	//LCM_CMD(0xee, 0), // ???
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(200),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd9481_init[] = {
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(20),
	LCM_CMD(0xd0, 3), 0x07,0x47,0x1d, // Power Setting
	LCM_CMD(0xd1, 3), 0x00,0x22,0x0d, // VCOM Control
	LCM_CMD(0xd2, 2), 0x01,0x11, // Power Setting for Normal Mode
	LCM_CMD(0xc0, 5), 0x10,0x3b,0x00,0x02,0x11, // Panel Driving Setting
	LCM_CMD(0xc1, 3), 0x11,0x10,0x88, // Display Timing Setting for Normal Mode
	LCM_CMD(0xc5, 1), 0x01, // Frame Rate and Inversion Control
	LCM_CMD(0xe4, 1), 0x0a, // ???
	LCM_CMD(0xf0, 1), 0x01, // ???
	LCM_CMD(0xf3, 2), 0x40,0x0a, // ???
	LCM_CMD(0xf7, 1), 0x80, // ???
	// Gamma Setting
	LCM_CMD(0xc8, 12), 0x13,0x47,0x32,0x43,
		0x00,0x16,0x54,0x03, 0x46,0x34,0x0f,0x00,
	LCM_CMD(0x35, 1), 0x00, // Set Tear ON
	//LCM_CMD(0x36, 1), 0x0a, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x55, // Pixel Format Set
	LCM_DELAY(120),
	LCM_CMD(0x21, 0), // Enter Invert Mode
	LCM_CMD(0x29, 0), // Display ON
	//LCM_CMD(0x2c, 0),
	LCM_END
};

/* This config is insane, and probably with a lot of typos in the firmware. */
static const uint8_t cmd5310_init[] = {
	LCM_DELAY(100),
	LCM_CMD(0xed, 2), 0x01,0xfe, // Unlock CMD2
	LCM_CMD(0xee, 2), 0xde,0x21, // Page Control
	LCM_DELAY(80),
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(160),
	LCM_CMD(0xc4, 1), 0x66,	// Power Control 6
	LCM_CMD(0xbf, 1), 0xaa, // Page Lock
	LCM_CMD(0xb0, 18), 0x00,0,
		0x04,0,0x08,0,0x0c,0,0x10,0,
		0x14,0,0x18,0,0x1c,0,0x20,0,
	// Front & Back Porch Setting
	LCM_CMD(0xb1, 6), 0x80,0,0x8b,0,0x96,0,
	// Framerate Control
	LCM_CMD(0xb2, 6), 0x00,0,0x02,0,0x03,0,
	// SPI & RGB Interface Setting
	LCM_CMD(0xb3, 24),
		0,0,0,0,0,0, 0,0,0,0,0,0,
		0,0,0,0,0,0, 0,0,0,0,0,0,
	LCM_CMD(0xb6, 2), 0x00,0x00,
	LCM_CMD(0xb7, 22),
		0x3e,0,0x5e,0,0x9e,0, 0x04,0,0x8c,0,0xac,0,
		0xdc,0,0x00,0,0xbb,0, 0xec,0,0xdc,0,
	LCM_CMD(0xb4, 6), 0x8b,0,0x96,0,0xa1,0,
	LCM_CMD(0xb5, 6), 0x02,0,0x03,0,0x04,0,
	LCM_CMD(0xc2, 4), 0x0a,0,0x04,0,
	LCM_CMD(0xc7, 4), 0x00,0,0x00,0,
	LCM_CMD(0xc9, 16), 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
#define X(x) LCM_CMD(x, 18), \
	0x01,0,0x0e,0,0x1a,0, \
	0x2a,0,0x36,0,0x3f,0, \
	0x50,0,0x66,0,0x78,0, LCM_DATA(18), \
	0x88,0,0x97,0,0xa8,0, \
	0xb3,0,0xb9,0,0xc1,0, \
	0xc5,0,0xc7,0,0xca,0,
	// Gamma Control 1..6
	X(0xe0) X(0xe1) X(0xe2) X(0xe3) X(0xe4) X(0xe5)
#undef X
#define X(x) LCM_CMD(x, 16), \
	0x22,0,0x33,0,0x44,0,0x55,0, \
	0x66,0,0x66,0,0x88,0,0x99,0, LCM_DATA(16), \
	0xaa,0,0x88,0,0x66,0,0x55,0, \
	0x55,0,0x33,0,0x11,0,0x11,0,
	// CABC Gamma offset
	X(0xe6) X(0xe7) X(0xe8)
#undef X
	LCM_CMD(0xe9, 4), 0xaa,0x00,0x00,0x00, // ???
	LCM_CMD(0x00, 1), 0xaa, // ???
	LCM_CMD(0xf3, 1), 0x00, // ???
	LCM_CMD(0xf9, 4), 0x06,0x10,0x29,0x00, // ???
	LCM_CMD(0xdf, 1), 0x10, // MTP Write function enable (nROM = 1)
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(80),
	LCM_CMD(0xb4, 1), 0x00, // Inversion Control
	LCM_CMD(0x3a, 1), 0x55, // Pixel Format Set
	//LCM_CMD(0x36, 1), 0x00, // Memory Access Control
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd9328_init[] = {
	LCM_DELAY(120),
#define X(a, b) LCM_CMD(0x00, 0), LCM_CMD(a, b)
	X(0x01, 2), 0x01,0x00, // Driver Output Control 1
	X(0x02, 2), 0x07,0x00, // LCD Driving Control
	//X(0x03, 2), 0x10,0x30, // Entry Mode
	X(0x04, 2), 0x00,0x00, // Resize Control
	X(0x08, 2), 0x02,0x07, // Display Control 2
	X(0x09, 2), 0x00,0x00, // Display Control 3
	X(0x0a, 2), 0x00,0x00, // Display Control 4
	X(0x0c, 2), 0x00,0x00, // RGB Display Interface Control 1
	X(0x0d, 2), 0x00,0x00, // Frame Maker Position
	X(0x0f, 2), 0x00,0x00, // RGB Display Interface Control 2
	X(0x10, 2), 0x00,0x00, // Power Control 1
	X(0x11, 2), 0x00,0x07, // Power Control 2
	X(0x12, 2), 0x00,0x00, // Power Control 3
	X(0x13, 2), 0x00,0x00, // Power Control 4
	X(0x07, 2), 0x00,0x01, // Display Control 1
	X(0x10, 2), 0x12,0x90, // Power Control 1
	X(0x11, 2), 0x02,0x27, // Power Control 2
	X(0x12, 2), 0x00,0x9d, // Power Control 3
	X(0x13, 2), 0x1a,0x00, // Power Control 4
	X(0x29, 2), 0x00,0x1d, // Power Control 7
	X(0x2b, 2), 0x00,0x0d, // Frame Rate and Color Control
	//X(0x20, 2), 0x00,0x00, // Horizontal GRAM Address Set
	//X(0x21, 2), 0x00,0x00, // Vertical GRAM Address Set
	X(0x30, 2), 0x00,0x00, // Gamma Control 1
	X(0x31, 2), 0x02,0x01, // Gamma Control 2
	X(0x32, 2), 0x00,0x03, // Gamma Control 3
	X(0x35, 2), 0x03,0x05, // Gamma Control 4
	X(0x36, 2), 0x00,0x04, // Gamma Control 5
	X(0x37, 2), 0x04,0x07, // Gamma Control 6
	X(0x38, 2), 0x06,0x05, // Gamma Control 7
	X(0x39, 2), 0x07,0x07, // Gamma Control 8
	X(0x3c, 2), 0x05,0x03, // Gamma Control 9
	X(0x3d, 2), 0x00,0x04, // Gamma Control 10
	//X(0x50, 2), 0x00,0x00, // Horizontal Address Start Position
	//X(0x51, 2), 0x00,0xef, // Horizontal Address End Position
	//X(0x52, 2), 0x00,0x00, // Vertical Address Start Position
	//X(0x53, 2), 0x01,0x3f, // Vertical Address End Position
	X(0x60, 2), 0xa7,0x00, // Driver Output Control 2
	X(0x61, 2), 0x00,0x01, // Base Image Display Control
	X(0x6a, 2), 0x00,0x00, // Vertical Scroll Control
	X(0x80, 2), 0x00,0x00, // Partial Image 1 Display Position
	X(0x81, 2), 0x00,0x00, // Partial Image 1 Area (Start Line)
	X(0x82, 2), 0x00,0x00, // Partial Image 1 Area (End Line)
	X(0x83, 2), 0x00,0x00, // Partial Image 2 Display Position
	X(0x84, 2), 0x00,0x00, // Partial Image 2 Area (Start Line)
	X(0x85, 2), 0x00,0x00, // Partial Image 2 Area (End Line)
	X(0x90, 2), 0x00,0x10, // Panel Interface Control 1
	X(0x92, 2), 0x06,0x00, // Panel Interface Control 2
	X(0x07, 2), 0x01,0x33, // Display Control 1
	//X(0x22, 0), // Write Data to GRAM
#undef X
	LCM_END
};

static const uint8_t cmd5420_init[] = {
	LCM_DELAY(100),
#define X(a, b) LCM_CMD(a >> 8, 0), LCM_CMD(a & 0xff, 2), b >> 8, b & 0xff,
	X(0x606, 0x0000) // Pin Control
	X(0x007, 0x0001) // Display Control 1
	X(0x110, 0x0001) // Power Control 6
	X(0x100, 0x17b0) // Power Control 1
	X(0x101, 0x0147) // Power Control 2
	X(0x102, 0x019d) // Power Control 3
	X(0x103, 0x3600) // Power Control 4
	X(0x281, 0x0005) // NVM read data 2
	X(0x102, 0x01bd) // Power Control 3
	X(0x000, 0x0000) // ???
	X(0x001, 0x0100) // Driver Output Control Register
	X(0x002, 0x0100) // LCD Driving Waveform Control
	//X(0x003, 0x1030) // Entry Mode
	X(0x006, 0x0000) // ???
	X(0x008, 0x0808) // Display Control 2
	X(0x009, 0x0001) // Display Control 3
	X(0x00b, 0x0010) // Low Power Control
	X(0x00c, 0x0000) // External Display Interface Control 1
	X(0x00f, 0x0000) // External Display Interface Control 2
	X(0x007, 0x0001) // Display Control 1
	X(0x010, 0x0014) // Panel Interface Control 1
	X(0x011, 0x0202) // Panel Interface Control 2
	X(0x012, 0x0300) // Panel Interface Control 3
	X(0x020, 0x021e) // Panel Interface Control 4
	X(0x021, 0x0202) // Panel Interface Control 5
	X(0x022, 0x0100) // Panel Interface Control 6
	X(0x090, 0x8000) // Frame Marker Control
	X(0x092, 0x0000) // ???
	X(0x100, 0x17b0) // Power Control 1
	X(0x101, 0x0147) // Power Control 2
	X(0x102, 0x01a8) // Power Control 3
	X(0x103, 0x2e00) // Power Control 4
	X(0x107, 0x0000) // Power Control 5
	X(0x110, 0x0001) // Power Control 6
	//X(0x210, 0x0000) // Horizontal Address Start Position
	//X(0x211, 0x00ef) // Horizontal Address End Position
	//X(0x212, 0x0000) // Vertical Address Start Position
	//X(0x213, 0x018f) // Vertical Address End Position
	X(0x280, 0x0000) // NVM read data 1
	X(0x281, 0x0000) // NVM read data 2
	X(0x282, 0x0000) // NVM read data 3
	X(0x300, 0x0101) // Gamma Control 1
	X(0x301, 0x0b31) // Gamma Control 2
	X(0x302, 0x1333) // Gamma Control 3
	X(0x303, 0x3313) // Gamma Control 4
	X(0x304, 0x310b) // Gamma Control 5
	X(0x305, 0x0101) // Gamma Control 6
	X(0x306, 0x030a) // Gamma Control 7
	X(0x307, 0x0a03) // Gamma Control 8
	X(0x308, 0x0006) // Gamma Control 9
	X(0x309, 0x0004) // Gamma Control 10
	X(0x30a, 0x0e05) // Gamma Control 11
	X(0x30b, 0x0e01) // Gamma Control 12
	X(0x30c, 0x010e) // Gamma Control 13
	X(0x30d, 0x050e) // Gamma Control 14
	X(0x30e, 0x0400) // Gamma Control 15
	X(0x30f, 0x0600) // Gamma Control 16
	X(0x400, 0x3500) // Image Number of Lines
	X(0x401, 0x0001) // Image Display Control
	X(0x404, 0x0000) // Image Vertical Scroll Control
	X(0x500, 0x0000) // Partial Image 1 Display Position
	X(0x501, 0x0000) // Partial Image 1 Area (Start Line)
	X(0x502, 0x0000) // Partial Image 1 Area (End Line)
	X(0x503, 0x0000) // Partial Image 2 Display Position
	X(0x504, 0x0000) // Partial Image 2 Area (Start Line)
	X(0x505, 0x0000) // Partial Image 2 Area (End Line)
	X(0x600, 0x0000) // ???
	X(0x606, 0x0000) // Pin Control
	X(0x6f0, 0x0000) // NVM Access Control
	X(0x7f0, 0x5420)
	X(0x7f2, 0x00df)
	X(0x7f3, 0x2890)
	X(0x7f4, 0x0022)
	X(0x7f5, 0x0001)
	X(0x7f0, 0x0000)
	X(0x007, 0x0173) // Display Control 1
	//X(0x202) Write Data to GRAM
#undef X
	LCM_END
};

static const uint8_t cmd6D04_init[] = {
	LCM_DELAY(120),
	LCM_CMD(0xf0, 2), 0x5a,0x5a, // PASSWD1
	LCM_DELAY(100),
	LCM_CMD(0xf4, 14), // Power Control
		0x09,0x00,0x00,0x00,0x21,0x47,0x01,
		0x02,0x2a,0x16,0x06,0x2a,0x00,0x06,
	LCM_CMD(0xf5, 10), // VCOM Control
		0x00,0x26,0x52,0x00,0x00,0x00,0x00,0x00,0x0d,0x0d,
	LCM_CMD(0xf6, 7), // Source Control
		0x01,0x01,0x07,0x00,0x01,0x0c,0x03,
	LCM_CMD(0xfc, 2), 0x5a,0x5a, // ???
	LCM_CMD(0xf8, 2), 0x22,0x00, // Panel Control
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	//LCM_CMD(0x36, 1), 0x48, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x55, // Pixel Format Set
	LCM_CMD(0xf7, 4), 0x00,0x00,0x00,0x00, // Interface Control
	LCM_CMD(0xf2, 17), // Display Control
		0x28,0x59,0x7f,0x08,0x08,0x00,0x00,
		0x19,0x48,0x04,0x07,0x01,0x00,0x00,
		0x59,0x08,0x08,
	LCM_CMD(0x26, 1), 0x04, // Gamma Set
	//LCM_CMD(0x11, 0), // Sleep Out Mode
	//LCM_DELAY(120),
	//LCM_CMD(0x2a, 4), 0x00,0x00,0x00,0x1f, // Column Address Set
	//LCM_CMD(0x2b, 4), 0x00,0x00,0x01,0x3f, // Page Address Set
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	//LCM_DELAY(120),
	LCM_END
};

static const uint8_t cmd9226_init[] = {
	LCM_DELAY(40),
#define X(a, b) LCM_CMD(a >> 8, 0), LCM_CMD(a & 0xff, 2), b >> 8, b & 0xff,
	X(0xd0, 0x0003)
	X(0xeb, 0x0b00)
	X(0xec, 0x004f)
	X(0xc7, 0x030f)
	X(0x01, 0x011c) // Driver Output Control
	X(0x02, 0x0100) // LCD Driving Waveform Control
	//X(0x03, 0x1030) // Entry Mode
	X(0x08, 0x0808) // Display Control 2
	X(0x0f, 0x0901) // Oscillator Control
	LCM_DELAY(10),
	X(0x10, 0x0000) // Power Control 1
	X(0x11, 0x1b41) // Power Control 2
	LCM_DELAY(120),
	X(0x12, 0x200e) // Power Control 3
	X(0x13, 0x0052) // Power Control 4
	X(0x14, 0x5a66) // Power Control 5
	X(0x30, 0x0000) // Gate Scan Control
	X(0x31, 0x00db) // Vertical Scroll Control 1
	X(0x32, 0x0000) // Vertical Scroll Control 2
	X(0x33, 0x0000) // Vertical Scroll Control 3
	X(0x34, 0x00db) // Partial Screen Driving Position
	X(0x35, 0x0000)
	//X(0x36, 0x00af) // Horizontal Address End Position
	//X(0x37, 0x0000) // Horizontal Address Start Position
	//X(0x38, 0x00db) // Vertical Address End Position
	//X(0x39, 0x0000) // Vertical Address Start Position
	X(0x50, 0x0000) // Gamma Control 1
	X(0x51, 0x010c) // Gamma Control 2
	X(0x52, 0x0a01) // Gamma Control 3
	X(0x53, 0x0401) // Gamma Control 4
	X(0x54, 0x020a) // Gamma Control 5
	X(0x55, 0x0b00) // Gamma Control 6
	X(0x56, 0x0000) // Gamma Control 7
	X(0x57, 0x0104) // Gamma Control 8
	X(0x58, 0x0e05) // Gamma Control 9
	X(0x59, 0x050e) // Gamma Control 10
	//X(0x20, 0x0000) // RAM Address Set 1
	//X(0x21, 0x0000) // RAM Address Set 2
	X(0x07, 0x1017) // Display Control 1
#undef X
	LCM_END
};

static const uint8_t cmd7C89F0_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	// Frame Rate Control 1-3
	LCM_CMD(0xb1, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb2, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb3, 6), 0x05,0x3c,0x3c,0x05,0x3c,0x3c,
	LCM_CMD(0xb4, 2), 0x03,0x02, // Display Inversion Control
	// Power Control 1-5
	LCM_CMD(0xc0, 3), 0xa4,0x04,0x84,
	LCM_CMD(0xc1, 1), 0xc4,
	LCM_CMD(0xc2, 2), 0x0d,0x00,
	LCM_CMD(0xc3, 2), 0x8d,0x2a,
	LCM_CMD(0xc4, 2), 0x8d,0xee,
	LCM_CMD(0xc5, 1), 0x04, // VCOM Control 1
	// Set Gamma 1
	LCM_CMD(0xe0, 16), 0x05,0x19,0x14,0x17,
		0x3d,0x38,0x2e,0x2f, 0x2d,0x29,0x31,0x3b, 0x00,0x03,0x00,0x10,
	// Set Gamma 2
	LCM_CMD(0xe1, 16), 0x04,0x15,0x0e,0x10,
		0x31,0x2d,0x29,0x2d, 0x2b,0x28,0x2e,0x39, 0x00,0x01,0x02,0x10,
	//LCM_CMD(0x2a, 4), 0x00,0x00,0x00,0x7f,
	//LCM_CMD(0x2b, 4), 0x00,0x00,0x00,0x9f,
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	//LCM_CMD(0x36, 1), 0xd0, // Memory Access Control
	LCM_CMD(0x21, 0), // Display Inversion ON
	LCM_CMD(0x29, 0), // Display ON
	//LCM_CMD(0x2c, 0),
	LCM_END
};

#if LIBC_SDIO == 0
static const uint8_t cmd1306_init[] = {
	LCM_DELAY(20),
	LCM_CMD(0xae, 0), // Display OFF
	//LCM_CMD(0x00, 0), // Set Column Address (low)
	//LCM_CMD(0x12, 0), // Set Column Address (high)
	LCM_CMD(0x40, 0), // Set Start Line (0)
	//LCM_CMD(0xb0, 0), // Set Page Address
	LCM_CMD(0x81, 0), // Set Contrast Control
#if 0 // orig
	LCM_CMD(0xff, 0), // (value)
#else
	LCM_CMD(0x80, 0), // (value)
#endif
	//LCM_CMD(0xa1, 0), // SEG Direction (MX=1)
	//LCM_CMD(0xa7, 0), // Inverse Display (INV=1)
	LCM_CMD(0xa8, 0), // Set Multiplex Ratio
	LCM_CMD(0x2f, 0), // (value)
	//LCM_CMD(0xc8, 0), // COM Direction (MY=1)
	LCM_CMD(0xd3, 0), // Set Display Offset
	LCM_CMD(0x00, 0), // (value)
	LCM_CMD(0xd5, 0), // Set Display Clock
#if 0 // orig
	LCM_CMD(0x80, 0), // (value)
#else // max freq
	LCM_CMD(0xf0, 0), // (value)
#endif
	LCM_CMD(0xd9, 0), // Set Pre-charge Period
#if 0 // orig
	LCM_CMD(0x21, 0), // (value)
#else
	LCM_CMD(0x11, 0), // (value)
#endif
	LCM_CMD(0xda, 0), // Set COM Pins
	LCM_CMD(0x12, 0), // (value)
	LCM_CMD(0xdb, 0), // Set VCOMH Deselect Level
	LCM_CMD(0x40, 0), // (value)
	LCM_CMD(0x8d, 0), // Charge Pump Setting
	LCM_CMD(0x14, 0), // Enable Charge Pump
	LCM_CMD(0xaf, 0), // Display ON
#if 1 // horizontal addressing mode
	LCM_CMD(0x20, 0), // Set Memory Addressing Mode
	LCM_CMD(0x00, 0), // (value)
	LCM_CMD(0x21, 0), // Set Column Address
	LCM_CMD(0x20, 0), // (start)
	LCM_CMD(0x5f, 0), // (end)
	LCM_CMD(0x22, 0), // Set Page Address
	LCM_CMD(0x00, 0), // (start)
	LCM_CMD(0x05, 0), // (end)
#endif
	LCM_END
};
#endif

// SC6530/SC6531

static const uint8_t cmd9106_chip2_init[] = {
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	LCM_CMD(0xb3, 1), 0x03, // ???
	LCM_CMD(0xb6, 1), 0x01, // ???
	LCM_CMD(0xa3, 1), 0x11, // Frame Rate
	LCM_CMD(0x21, 0), // Display Inversion ON
	//LCM_CMD(0x36, 1), 0xd0, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0xb4, 1), 0x21, // Display Inversion Control
	// Set Gamma 1
	LCM_CMD(0xf0, 14), 0x0c,0x46,0x25,0x56,
		0xac,0x24,0x25,0x00, 0x00,0x12,0x15,0x16, 0x17,0x0f,
	// Set Gamma 2
	LCM_CMD(0xf1, 14), 0x00,0x26,0x25,0x3a,
		0xb9,0x0f,0x10,0x00, 0x00,0x07,0x07,0x17, 0x16,0x0f,
	//LCM_CMD(0xfe, 0), // Inter Register Enable 1
	//LCM_CMD(0xff, 0), // ???
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	//LCM_DELAY(120),
	LCM_END
};

static const uint8_t cmd9106_chip2_texet_init[] = {
	LCM_DELAY(120),
	//LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	LCM_CMD(0xb3, 1), 0x03, // ???
	LCM_CMD(0xb6, 1), 0x01, // ???
	LCM_CMD(0xa3, 1), 0x11, // Frame Rate
	LCM_CMD(0x21, 0), // Display Inversion ON
	//LCM_CMD(0x36, 1), 0xd0, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0xb4, 1), 0x21, // Display Inversion Control
	// Set Gamma 1
	LCM_CMD(0xf0, 14), 0x25,0x58,0x24,0x68,
		0xad,0x36,0x38,0x00, 0x0b,0x15,0x15,0x17, 0x15,0x0f,
	// Set Gamma 2
	LCM_CMD(0xf1, 14), 0x00,0x1e,0x25,0x30,
		0x97,0x03,0x03,0x00, 0x00,0x07,0x07,0x15, 0x14,0x0f,
	//LCM_CMD(0xfe, 0), // Inter Register Enable 1
	//LCM_CMD(0xff, 0), // ???
	LCM_CMD(0x35, 1), 0x00,
	LCM_CMD(0x44, 1), 0x00,
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	//LCM_CMD(0x2c, 0),
	LCM_END
};

static const uint8_t cmd9108_init[] = {
	LCM_DELAY(120),
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	LCM_CMD(0xb3, 1), 0x03,
	LCM_CMD(0xb6, 1), 0x01,
	LCM_CMD(0xa3, 1), 0x11,
	LCM_CMD(0x21, 0),
	//LCM_CMD(0x36, 1), 0xd0, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0xb4, 1), 0x21,
	// Set Gamma 1
	LCM_CMD(0xf0, 14), 0x25,0x58,0x24,0x68,
		0xad,0x36,0x38,0x00, 0x0b,0x15,0x15,0x17, 0x15,0x0f,
	// Set Gamma 2
	LCM_CMD(0xf1, 14), 0x00,0x1e,0x25,0x30,
		0x97,0x03,0x03,0x00, 0x00,0x07,0x07,0x15, 0x14,0x0f,
	LCM_CMD(0x35, 1), 0x00,
	LCM_CMD(0x44, 1), 0x00,
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

// 240x240
static const uint8_t cmd9307_square_init[] = {
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	//LCM_CMD(0x36, 1), 0x48, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0x86, 1), 0x98,
	LCM_CMD(0x89, 1), 0x03,
	LCM_CMD(0x8b, 1), 0x80,
	LCM_CMD(0x8d, 1), 0x22,
	LCM_CMD(0xe8, 2), 0x13,0x00,
	LCM_CMD(0xc3, 1), 0x27,
	LCM_CMD(0xc4, 1), 0x18,
	LCM_CMD(0xc9, 1), 0x1f,
	LCM_CMD(0xc5, 1), 0x0f,
	LCM_CMD(0xc6, 1), 0x10,
	LCM_CMD(0xc7, 1), 0x10,
	LCM_CMD(0xc8, 1), 0x10,
	LCM_CMD(0xff, 1), 0x62,
	LCM_CMD(0x99, 1), 0x3e,
	LCM_CMD(0x9d, 1), 0x4b,
	LCM_CMD(0x8e, 1), 0x0f,
	LCM_CMD(0xf0, 6), 0x8f,0x16,0x06,0x06,0x06,0x3c,
	LCM_CMD(0xf2, 6), 0x8f,0x13,0x06,0x06,0x07,0x3b,
	LCM_CMD(0xf1, 6), 0x52,0xbc,0x8f,0x35,0x38,0x4f,
	LCM_CMD(0xf3, 6), 0x54,0xbc,0x8f,0x33,0x3c,0x4f,
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd9307_init[] = {
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	//LCM_CMD(0x36, 1), 0x48, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0x35, 1), 0x00,
	LCM_CMD(0x44, 2), 0x00,0x10,
	LCM_CMD(0x21, 0),
	LCM_CMD(0x86, 1), 0x99,
	LCM_CMD(0x87, 1), 0x79,
	LCM_CMD(0x89, 1), 0x03,
	LCM_CMD(0xe8, 2), 0x22,0x70,
	LCM_CMD(0x8b, 1), 0x80,
	LCM_CMD(0x8d, 1), 0x22,
	LCM_CMD(0x8e, 1), 0x0f,
	LCM_CMD(0xc3, 1), 0x2a,
	LCM_CMD(0xc4, 1), 0x05,
	LCM_CMD(0xc9, 1), 0x0a,
	LCM_CMD(0xff, 1), 0x62,
	LCM_CMD(0x99, 1), 0x3e,
	LCM_CMD(0x9d, 1), 0x4b,
	LCM_CMD(0x8a, 1), 0x40,
	LCM_CMD(0xf6, 1), 0x00,
	LCM_CMD(0xf0, 6), 0x81,0x00,0x13,0x14,0x0b,0x45,
	LCM_CMD(0xf1, 6), 0x58,0x77,0x76,0x2b,0x34,0x6f,
	LCM_CMD(0xf2, 6), 0x44,0x00,0x19,0x17,0x0d,0x46,
	LCM_CMD(0xf3, 6), 0x55,0xb7,0xd5,0x28,0x24,0xff,
	//LCM_CMD(0xfe, 0), // Inter Register Enable 1
	//LCM_CMD(0xee, 0), // ???
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd7C89F0_square_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	// Frame Rate Control 1-3
	LCM_CMD(0xb1, 3), 0x01,0x08,0x05,
	LCM_CMD(0xb2, 3), 0x01,0x08,0x05,
	LCM_CMD(0xb3, 6), 0x01,0x08,0x05,0x05,0x08,0x05,
	LCM_CMD(0xb4, 1), 0x03, // Display Inversion Control
	// Power Control 1-5
	LCM_CMD(0xc0, 3), 0x28,0x08,0x04,
	LCM_CMD(0xc1, 1), 0xc0,
	LCM_CMD(0xc2, 2), 0x0d,0x00,
	LCM_CMD(0xc3, 2), 0x8d,0x2a,
	LCM_CMD(0xc4, 2), 0x8d,0xee,
	LCM_CMD(0xc5, 1), 0x14, // VCOM Control 1
	//LCM_CMD(0x36, 1), 0xc8, // Memory Access Control
	// Set Gamma 1
	LCM_CMD(0xe0, 16), 0x07,0x18,0x0c,0x15,
		0x2e,0x2a,0x23,0x28, 0x28,0x28,0x2e,0x39, 0x00,0x03,0x02,0x10,
	// Set Gamma 2
	LCM_CMD(0xe1, 16), 0x06,0x23,0x0d,0x17,
		0x35,0x30,0x2a,0x2d, 0x2c,0x29,0x31,0x3b, 0x00,0x02,0x03,0x12,
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd5CC0F1_init[] = {
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	// Frame Rate Control 1
	LCM_CMD(0xb1, 3), 0x04,0x10,0x10,
	LCM_CMD(0xb4, 1), 0x03,	// Display Inversion Control
	LCM_CMD(0xb6, 2), 0x17,0x00, // Display Function Setting
	// Power Control 1-3
	LCM_CMD(0xc0, 3), 0xa4,0x04,0x04,
	LCM_CMD(0xc1, 1), 0xc0,
	LCM_CMD(0xc2, 2), 0x0a,0x00,
	LCM_CMD(0xc5, 1), 0x0f, // VCOM Control 1
	//LCM_CMD(0x36, 1), 0xc8, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	// Set Gamma 1
	LCM_CMD(0xe0, 16), 0x02,0x1f,0x0b,0x12,
		0x36,0x33,0x2d,0x31, 0x2f,0x2c,0x33,0x3b, 0x00,0x02,0x01,0x02,
	// Set Gamma 2
	LCM_CMD(0xe1, 16), 0x02,0x1f,0x0b,0x12,
		0x36,0x32,0x2d,0x30, 0x2f,0x2c,0x33,0x3b, 0x00,0x01,0x00,0x02,
	LCM_CMD(0x29, 0), // Display ON
	//LCM_DELAY(120),
	LCM_END
};

static const uint8_t cmd5CA1F1_init[] = {
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	// Frame Rate Control 1-3
	LCM_CMD(0xb1, 3), 0x0f,0x04,0x04,
	LCM_CMD(0xb2, 3), 0x05,0x3a,0x3a,
	LCM_CMD(0xb3, 6), 0x05,0x3a,0x3a,0x05,0x3a,0x3a,
	LCM_CMD(0xb4, 1), 0x00,	// Display Inversion Control
	// Power Control 1-5
	LCM_CMD(0xc0, 3), 0xc3,0x06,0x44,
	LCM_CMD(0xc1, 1), 0xc2,
	LCM_CMD(0xc2, 2), 0x0d,0x00,
	LCM_CMD(0xc3, 2), 0xdb,0x2a,
	LCM_CMD(0xc4, 2), 0x8b,0xee,
	LCM_CMD(0xc5, 1), 0x0d, // VCOM Control 1
	//LCM_CMD(0x36, 1), 0x00, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	// Set Gamma 1
	LCM_CMD(0xe0, 16), 0x13,0x14,0x06,0x11,
		0x29,0x26,0x21,0x26, 0x25,0x26,0x2e,0x3b, 0x00,0x03,0x02,0x06,
	// Set Gamma 2
	LCM_CMD(0xe1, 16), 0x02,0x25,0x06,0x11,
		0x29,0x26,0x21,0x26, 0x26,0x26,0x2e,0x3b, 0x00,0x03,0x02,0x06,
	LCM_CMD(0x29, 0), // Display ON
	//LCM_DELAY(120),
	LCM_END
};

static const uint8_t cmd333025_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0xff, 1), 0xa5,
	LCM_CMD(0x3e, 1), 0x08,
	LCM_CMD(0x3a, 1), 0x65, // Pixel Format Set
	LCM_CMD(0x82, 1), 0x00,
	LCM_CMD(0x98, 1), 0x00,
	LCM_CMD(0x63, 1), 0x0f,
	LCM_CMD(0x64, 1), 0x0f,
	LCM_CMD(0xb4, 1), 0x34,
	LCM_CMD(0xb5, 1), 0x30,
	LCM_CMD(0x83, 1), 0x13,
	LCM_CMD(0x86, 1), 0x04,
	LCM_CMD(0x87, 1), 0x16,
	LCM_CMD(0x88, 1), 0x28,
	LCM_CMD(0x89, 1), 0x2f,
	LCM_CMD(0x93, 1), 0x63,
	LCM_CMD(0x96, 1), 0x81,
	LCM_CMD(0xc3, 1), 0x11,
	LCM_CMD(0xe6, 1), 0x00,
	LCM_CMD(0x99, 1), 0x01,

#define X(i, a, b, c, d) \
	LCM_CMD(i, 1), a, \
	LCM_CMD(i + 1, 1), b, \
	LCM_CMD(i + 2, 1), c, \
	LCM_CMD(i + 3, 1), d
	// Gamma?
	X(0x70, 0x07,0x19,0x1a,0x13),
	X(0x74, 0x19,0x1d,0x47,0x0a),
	X(0x78, 0x07,0x47,0x05,0x09),
	X(0x7c, 0x0d,0x0c,0x0c,0x08),
	// Gamma?
	X(0xa0, 0x0b,0x36,0x09,0x0d),
	X(0xa4, 0x08,0x23,0x3b,0x04),
	X(0xa8, 0x07,0x38,0x0a,0x12),
	X(0xac, 0x0c,0x07,0x2f,0x07),
#undef X

	LCM_CMD(0xff, 1), 0x00,
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	//LCM_CMD(0x36, 1), 0xa8, // Memory Access Control
	LCM_CMD(0x29, 0), // Display ON
	LCM_DELAY(10),
	LCM_END
};

static const uint8_t cmd9102_nomi_init[] = {
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	//LCM_CMD(0x36, 1), 0xd0, // Memory Access Control
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	LCM_CMD(0xa8, 3), 0x02,0x00,0x00,
	LCM_CMD(0xa7, 1), 0x02,
	LCM_CMD(0xea, 1), 0x3a,
	LCM_CMD(0xb4, 1), 0x00, // Display Inversion Control
	LCM_CMD(0xff, 1), 0x12, // Power Control 4
	LCM_CMD(0xfd, 1), 0x08, // Power Control 3
	LCM_CMD(0xa4, 1), 0x09,	// Power Control 1
	LCM_CMD(0xe7, 2), 0x94,0x88,
	LCM_CMD(0xed, 1), 0x11, // Power Control 2
	LCM_CMD(0xe4, 1), 0xc5,
	LCM_CMD(0xe2, 1), 0x80,
	LCM_CMD(0xa3, 1), 0x09, // Frame Rate
	LCM_CMD(0xe3, 1), 0x07,
	LCM_CMD(0xe5, 1), 0x10,

	LCM_CMD(0xf0, 1), 0x70,	// Set Gamma 1
	LCM_CMD(0xf1, 1), 0x07,	// Set Gamma 2
	LCM_CMD(0xf2, 1), 0x00,	// Set Gamma 3
	LCM_CMD(0xf3, 1), 0x45,	// Set Gamma 4
	LCM_CMD(0xf4, 1), 0x00,	// Set Gamma 5
	LCM_CMD(0xf5, 1), 0x0c,	// Set Gamma 6
	// 0xf6 skipped
	LCM_CMD(0xf7, 1), 0x57,	// Set Gamma 7
	LCM_CMD(0xf8, 1), 0x44, // Set Gamma 8
	LCM_CMD(0xf9, 1), 0x66,	// Set Gamma 9
	LCM_CMD(0xfa, 1), 0x22,	// Set Gamma 10
	LCM_CMD(0xfb, 1), 0x04,	// Set Gamma 11
	LCM_CMD(0xfc, 1), 0x00,	// Set Gamma 12

	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_DELAY(50),
	LCM_END
};

static const uint8_t cmd9305_sigma_init[] = {
	LCM_CMD(0xfe, 0), // Inter Register Enable 1
	LCM_CMD(0xef, 0), // Inter Register Enable 2
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	//LCM_CMD(0x36, 1), 0x48, // Memory Access Control
	LCM_CMD(0xa4, 2), 0x44,0x44, // Vcore voltage Control
	LCM_CMD(0xa5, 2), 0x42,0x42,
	LCM_CMD(0xaa, 2), 0x88,0x88,
	LCM_CMD(0xe8, 2), 0x21,0x0b, // Frame Rate
	LCM_CMD(0xe3, 2), 0x01,0x18,
	LCM_CMD(0xe1, 2), 0x01,0x0a,
	LCM_CMD(0xac, 1), 0x00,
	LCM_CMD(0xad, 1), 0x33,
	LCM_CMD(0xae, 1), 0x2b,
	LCM_CMD(0xaf, 1), 0x55,
	LCM_CMD(0xa6, 2), 0x19,0x19, // Vreg1a voltage Control
	LCM_CMD(0xa7, 2), 0x27,0x27, // Vreg1b voltage Control
	LCM_CMD(0xa8, 2), 0x17,0x17, // Vreg2a voltage Control
	LCM_CMD(0xa9, 2), 0x26,0x26, // Vreg2b voltage Control
	LCM_CMD(0xf0, 6), 0x02,0x02,0x00,0x00,0x03,0x00, // Set Gamma 1
	LCM_CMD(0xf1, 6), 0x01,0x00,0x00,0x00,0x02,0x11, // Set Gamma 2
	LCM_CMD(0xf2, 6), 0x0a,0x0a,0x3a,0x03,0x04,0x53, // Set Gamma 3
	LCM_CMD(0xf3, 6), 0x0b,0x0a,0x30,0x06,0x04,0x3d, // Set Gamma 4
	LCM_CMD(0xf4, 6), 0x06,0x10,0x0f,0x30,0x3a,0x0f, // Set Gamma 5
	LCM_CMD(0xf5, 6), 0x0f,0x1d,0x1f,0x08,0x3a,0x0f, // Set Gamma 6
	LCM_CMD(0x35, 1), 0x00, // Tearing Effect Line ON
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	// LCM_CMD(0x2c, 0), // Memory Write
	LCM_END
};

static const uint8_t cmd5CB1F0_init[] = {
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0xf0, 1), 0x01,
	LCM_CMD(0xf2, 1), 0xc0,
	LCM_CMD(0xff, 3), 0x40,0x03,0x1a,
	LCM_CMD(0xb1, 3), 0x04,0x04,0x03,
	LCM_CMD(0xb2, 3), 0x04,0x04,0x03,
	LCM_CMD(0xb3, 6), 0x04,0x04,0x03,0x04,0x04,0x03,
	LCM_CMD(0xb4, 1), 0x00,
	LCM_CMD(0xb6, 2), 0x17,0x00,
	LCM_CMD(0xc0, 2), 0x02,0x30,
	LCM_CMD(0xc1, 1), 0x05,
	LCM_CMD(0xc2, 2), 0x01,0x01,
	LCM_CMD(0xc3, 2), 0x01,0x01,
	LCM_CMD(0xc4, 2), 0x01,0x01,
	LCM_CMD(0xc5, 2), 0x3c,0x56,
	LCM_CMD(0xfc, 2), 0x11,0x17,
	//LCM_CMD(0x36, 1), 0xc8, // Memory Access Control
	// Set Gamma 1
	LCM_CMD(0xe0, 16), 0x03,0x20,0x10,0x24,0x29,0x20,0x18,0x1e,
		0x18,0x14,0x23,0x38,0x00,0x02,0x01,0x0a,
	// Set Gamma 2
	LCM_CMD(0xe1, 16), 0x04,0x20,0x10,0x2f,0x37,0x30,0x2c,0x31,
		0x33,0x33,0x39,0x38,0x00,0x02,0x01,0x0a,
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(200),
	LCM_CMD(0x29, 0), // Display ON
	LCM_DELAY(120),
	LCM_END
};

static const uint8_t cmd8552_chip2_init[] = {
	LCM_DELAY(120),
	LCM_CMD(0xb0, 2), 0x00,0xe0, // RAM Control
	LCM_CMD(0xb2, 5), 0x0c,0x0c,0x00,0x33,0x33, // Porch Setting
	LCM_CMD(0xb7, 1), 0x15, // Gate Control
	LCM_CMD(0xbb, 1), 0x10, // VCOM Setting
	LCM_CMD(0xc0, 1), 0x2c, // LCM Control
	LCM_CMD(0xc2, 1), 0x01, // VDV and VRH Command Enable
	LCM_CMD(0xc3, 1), 0x11, // VRH Set
	LCM_CMD(0xc6, 1), 0x0f, // Frame Rate Control in Normal Mode
	LCM_CMD(0xd0, 2), 0xa4,0xa1, // Power Control 1
	//LCM_CMD(0xd0, 2), 0xa7,0xa1, // Power Control 1
	// Positive Voltage Gamma Control
	LCM_CMD(0xe0, 14), 0xf0,0x03,0x0c,0x12,
		0x13,0x2c,0x3b,0x44, 0x4c,0x0a,0x12,0x11, 0x1e,0x21,
	// Negative Voltage Gamma Control
	LCM_CMD(0xe1, 14), 0xf0,0x01,0x08,0x0c,
		0x0e,0x28,0x3b,0x54, 0x4c,0x3c,0x16,0x16, 0x21,0x24,
	LCM_CMD(0x3a, 1), 0x55, // Interface Pixel Format
	//LCM_DATA(1), 0x22,
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	//LCM_CMD(0x36, 1), 0x00, // Memory Access Control
	LCM_END
};

static const uint8_t cmd9341_init[] = {
	//LCM_DELAY(150),
	LCM_CMD(0xcf, 3), 0x00,0xd9,0x30, // Power control B
	LCM_CMD(0xed, 4), 0x64,0x03,0x12,0x81, // Power on sequence control
	LCM_CMD(0xe8, 3), 0x85,0x10,0x78, // Driver timing control A
	LCM_CMD(0xcb, 5), 0x39,0x2c,0x00,0x34,0x02, // Power control A
	LCM_CMD(0xf7, 1), 0x20, // Pump ratio control
	LCM_CMD(0xea, 2), 0x00,0x00, // Driver timing control B
	LCM_CMD(0xc0, 1), 0x1b, // Power Control 1
	LCM_CMD(0xc1, 1), 0x12, // Power Control 2
	LCM_CMD(0xc5, 2), 0x32,0x3c, // VCOM Control 1
	LCM_CMD(0xc7, 1), 0x96, // VCOM Control 2
	//LCM_CMD(0x36, 1), 0x08, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x55, // Pixel Format Set
	LCM_CMD(0xb1, 2), 0x00,0x1b, // Frame Rate Control (Normal)
	LCM_CMD(0xb6, 2), 0x0a,0xa2, // Display Function Control
	LCM_CMD(0xf6, 2), 0x01,0x30, // Interface Control
	LCM_CMD(0xf2, 1), 0x00, // Enable 3 Gamma Control
	LCM_CMD(0x26, 1), 0x01, // Gamma Set
	// Positive Gamma Correction
	LCM_CMD(0xe0, 15), 0x0f,0x1d,0x19,0x0e,0x10,
		0x07,0x4c,0x63,0x3f,0x03, 0x0d,0x00,0x26,0x24,0x04,
	// Negative Gamma Correction
	LCM_CMD(0xe1, 15), 0x00,0x1c,0x1f,0x02,0x0f,
		0x03,0x35,0x25,0x47,0x04, 0x0c,0x0b,0x29,0x2f,0x05,
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

static const uint8_t cmd7567_init[] = {
	//LCM_DELAY(200),
	LCM_CMD(0xe2, 0), // Reset
	LCM_CMD(0xa2, 0), // Bias Select (BS=0)
	//LCM_CMD(0xa0, 0), // SEG Direction (MX=0)
	//LCM_CMD(0xc8, 0), // COM Direction (MY=1)
	//LCM_CMD(0xa6, 0), // Inverse Display (INV=0)
	LCM_CMD(0x40, 0), // Set Start Line (0)
	LCM_CMD(0x24, 0), // Regulation Ratio (4)
	LCM_CMD(0x81, 0), // Set EV (contrast)
#if 0 // Tokky FP10
	LCM_CMD(0x20, 0), // Set EV (value, 0x20)
#else // Fontel FP100
	LCM_CMD(0x23, 0), // Set EV (value, 0x23)
#endif
	LCM_CMD(0x2c, 0), // Power Control (VB=1, VR=0, VF=0)
	LCM_DELAY(100),
	LCM_CMD(0x2e, 0), // Power Control (VB=1, VR=1, VF=0)
	LCM_DELAY(100),
	LCM_CMD(0x2f, 0), // Power Control (VB=1, VR=1, VF=1)
	LCM_CMD(0xaf, 0), // Display ON
	LCM_DELAY(50),
	LCM_END
};

static const uint8_t cmd7565_init[] = {
	//LCM_DELAY(200),
	LCM_CMD(0xa4, 0), // All Pixel (AP=0)
	//LCM_CMD(0xa6, 0), // Inverse Display (INV=0)
	//LCM_CMD(0xa0, 0), // SEG Direction (MX=0)
	//LCM_CMD(0xc8, 0), // COM Direction (MY=1)
	LCM_CMD(0x40, 0), // Set Start Line (0)
	LCM_CMD(0x25, 0), // Regulation Ratio (5)
	LCM_CMD(0x81, 0), // Set EV (contrast)
	LCM_CMD(0x17, 0), // Set EV (value, 0x17)
	LCM_CMD(0xa2, 0), // Bias Select (BS=0)
	LCM_CMD(0x2c, 0), // Power Control (VB=1, VR=0, VF=0)
	LCM_CMD(0x2e, 0), // Power Control (VB=1, VR=1, VF=0)
	LCM_CMD(0x2f, 0), // Power Control (VB=1, VR=1, VF=1)
	LCM_CMD(0xaf, 0), // Display ON
	LCM_DELAY(50),
	LCM_END
};

static const uint8_t cmd1230_init[] = {
	LCM_DELAY(20),
	LCM_CMD(0xe2, 0), // Reset
	LCM_DELAY(120),
	LCM_CMD(0x2f, 0), // Power Control (VB=1, VR=1, VF=1)
	LCM_DELAY(50),
	// RR and EV commands seem to be ignored
	LCM_CMD(0x24, 0), // Regulation Ratio (4)
	LCM_CMD(0x8b, 0), // Electronic Volume (EV=0xb)
	//LCM_CMD(0xb0, 0), // Set Page Address
	//LCM_CMD(0xc8, 0), // COM Direction (MY=1)
	//LCM_CMD(0x10, 0), // Set Column Address (high)
	//LCM_CMD(0x00, 0), // Set Column Address (low)
	// HX1230 doesn't support SEG Direction
	//LCM_CMD(0xa1, 0), // SEG Direction (MX=1)
	LCM_CMD(0x40, 0), // Set Start Line (0)
	//LCM_CMD(0xa7, 0), // Inverse Display (INV=1)
	LCM_CMD(0xaf, 0), // Display ON
	LCM_CMD(0xa4, 0), // All Pixel (AP=0)
	LCM_END
};

static const uint8_t cmd8066_init[] = {
	LCM_DELAY(10),
	LCM_CMD(0xb4, 1), 0x07,
	LCM_CMD(0xb1, 1), 0x14,
	LCM_CMD(0xff, 1), 0xa5,
	LCM_CMD(0xec, 1), 0x89,
	LCM_CMD(0xed, 1), 0x37,
	LCM_CMD(0xee, 1), 0x14,
	LCM_CMD(0xf6, 1), 0x10,
	LCM_CMD(0xc4, 1), 0x0a,
	LCM_CMD(0xc5, 1), 0x4c,
	LCM_CMD(0xc6, 1), 0x3f,
	LCM_CMD(0xc7, 1), 0x03,
	LCM_CMD(0xe0, 1), 0x00,
	LCM_CMD(0xe8, 1), 0x77,
	LCM_CMD(0xe1, 1), 0x22,
	LCM_CMD(0xe7, 1), 0x55,
	LCM_CMD(0xe2, 1), 0x07,
	LCM_CMD(0xe6, 1), 0x77,
	LCM_CMD(0xe3, 1), 0x17,
	LCM_CMD(0xe9, 1), 0x77,
	LCM_CMD(0xe4, 1), 0x00,
	LCM_CMD(0xeb, 1), 0x05,
	LCM_CMD(0xe5, 1), 0x00,
	LCM_CMD(0xea, 1), 0x00,
	LCM_CMD(0x11, 0),
	LCM_DELAY(50),
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	//LCM_CMD(0x36, 1), 0x88, // Memory Access Control
	LCM_DELAY(50),
	LCM_CMD(0x29, 0),
	LCM_END
};

static const uint8_t cmd83760F_nokia_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0x11, 0),
	LCM_DELAY(120),
	LCM_CMD(0xf0, 1), 0x11,
	LCM_CMD(0xd6, 1), 0xcb,
	LCM_CMD(0xb1, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb2, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb3, 6), 0x05,0x3c,0x3c, 0x05,0x3c,0x3c,
	LCM_CMD(0xb4, 2), 0x03,0x02,
	LCM_CMD(0xc0, 3), 0x88,0x08,0x84,
	LCM_CMD(0xc1, 1), 0xc5,
	LCM_CMD(0xc2, 2), 0x0d,0x00,
	LCM_CMD(0xc3, 2), 0x8d,0x2a,
	LCM_CMD(0xc4, 2), 0x8d,0xee,
	LCM_CMD(0xc5, 1), 0x18,
	LCM_CMD(0xe0, 16), 0x03,0x20,0x0a,0x09, 0x2d,0x29,0x23,0x28,
		0x25,0x27,0x2e,0x3a, 0x00,0x01,0x00,0x10,
	LCM_CMD(0xe1, 16), 0x02,0x22,0x02,0x04, 0x21,0x20,0x1d,0x24,
		0x27,0x25,0x31,0x3f, 0x00,0x00,0x06,0x10,
	LCM_CMD(0x35, 1), 0x00,
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	//LCM_CMD(0x36, 1), 0xd0, // Memory Access Control
	LCM_CMD(0x29, 0),
	LCM_CMD(0x2c, 0),
	LCM_END
};

static const uint8_t cmd837610_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0x11, 0),
	LCM_DELAY(120),
	LCM_CMD(0xb1, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb2, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb3, 6), 0x05,0x3c,0x3c, 0x05,0x3c,0x3c,
	LCM_CMD(0xb4, 2), 0x03,0x02,
	LCM_CMD(0xc0, 3), 0x86,0x06,0x84,
	LCM_CMD(0xc1, 1), 0x00,
	LCM_CMD(0xc2, 2), 0x0d,0x00,
	LCM_CMD(0xc3, 2), 0x8d,0x2a,
	LCM_CMD(0xc4, 2), 0x8d,0xee,
	LCM_CMD(0xc5, 1), 0x0c,
	LCM_CMD(0xe0, 16), 0x03,0x1f,0x0a,0x12, 0x30,0x2d,0x26,0x28,
		0x28,0x24,0x2d,0x37, 0x00,0x01,0x00,0x10,
	LCM_CMD(0xe1, 16), 0x02,0x1c,0x05,0x09, 0x25,0x21,0x20,0x27,
		0x27,0x29,0x31,0x3f, 0x00,0x00,0x05,0x10,
	LCM_CMD(0x35, 1), 0x00,
	LCM_CMD(0x3a, 1), 0x05,
	//LCM_CMD(0x36, 1), 0xd0, // Memory Access Control
	LCM_CMD(0x29, 0),
	LCM_CMD(0x2c, 0),
	LCM_END
};

static const uint8_t cmd3D760F_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0x11, 0),
	LCM_DELAY(120),
	LCM_CMD(0xf0, 1), 0x11,
	LCM_CMD(0xd6, 1), 0xcb,
	LCM_CMD(0xb1, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb2, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb3, 6), 0x05,0x3c,0x3c, 0x05,0x3c,0x3c,
	LCM_CMD(0xb4, 2), 0x03,0x02,
	LCM_CMD(0xc0, 3), 0x88,0x08,0x84,
	LCM_CMD(0xc1, 1), 0xc5,
	LCM_CMD(0xc2, 2), 0x0d,0x00,
	LCM_CMD(0xc3, 2), 0x8d,0x2a,
	LCM_CMD(0xc4, 2), 0x8d,0xee,
	LCM_CMD(0xc5, 1), 0x1b,
	LCM_CMD(0xe0, 16), 0x03,0x20,0x0a,0x09, 0x2d,0x29,0x23,0x28,
		0x25,0x27,0x2e,0x3a, 0x00,0x01,0x00,0x10,
	LCM_CMD(0xe1, 16), 0x02,0x22,0x02,0x04, 0x21,0x20,0x1d,0x24,
		0x27,0x25,0x31,0x3f, 0x00,0x00,0x06,0x10,
	LCM_CMD(0x35, 1), 0x00,
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	//LCM_CMD(0x36, 1), 0xd0, // Memory Access Control
	LCM_CMD(0x29, 0),
	LCM_CMD(0x2c, 0),
	LCM_END
};


static const uint8_t cmd2C89F1_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0x11, 0),
	LCM_DELAY(120),
	//LCM_CMD(0x36, 1), 0xd8, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0xb1, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb2, 3), 0x05,0x3c,0x3c,
	LCM_CMD(0xb3, 6), 0x05,0x3c,0x3c, 0x05,0x3c,0x3c,
	LCM_CMD(0xb4, 2), 0x03,0x03,
	LCM_CMD(0xc0, 3), 0x44,0x04,0x84,
	LCM_CMD(0xc1, 1), 0xc5,
	LCM_CMD(0xc2, 2), 0x24,0x00,
	LCM_CMD(0xc3, 2), 0x8d,0x2a,
	LCM_CMD(0xc4, 2), 0x8d,0xee,
	LCM_CMD(0xc5, 1), 0x0b,
	LCM_CMD(0xe0, 16), 0x07,0x1a,0x12,0x1b, 0x3a,0x32,0x29,0x2b,
		0x28,0x25,0x2d,0x38, 0x00,0x02,0x00,0x10,
	LCM_CMD(0xe1, 16), 0x05,0x17,0x08,0x11, 0x2e,0x2a,0x25,0x29,
		0x2b,0x29,0x31,0x3e, 0x00,0x01,0x05,0x10,
	LCM_CMD(0x35, 1), 0x00,
	LCM_CMD(0x29, 0),
	LCM_CMD(0x2c, 0),
	LCM_END
};

static const uint8_t cmd9307_chip1_init[] = {
	//LCM_DELAY(120),
	LCM_CMD(0xfe, 0),
	LCM_CMD(0xef, 0),
	//LCM_CMD(0x36, 1), 0x48, // Memory Access Control
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0x21, 0),
	LCM_CMD(0x86, 1), 0x98,
	LCM_CMD(0x89, 1), 0x03,
	LCM_CMD(0x8b, 1), 0x84,
	LCM_CMD(0x8d, 1), 0x33,
	LCM_CMD(0x8e, 1), 0x0f,
	LCM_CMD(0xe8, 2), 0x12,0x00,
	LCM_CMD(0xff, 1), 0x62,
	LCM_CMD(0x99, 1), 0x3e,
	LCM_CMD(0x9d, 1), 0x4b,
	LCM_CMD(0x98, 1), 0x3e,
	LCM_CMD(0x9c, 1), 0x4b,
	LCM_CMD(0xc3, 1), 0x2f,
	LCM_CMD(0xc4, 1), 0x0b,
	LCM_CMD(0xc9, 1), 0x0a,
	LCM_CMD(0xf0, 6), 0x47,0x0c,0x0c,0x0f,0x1e,0x49,
	LCM_CMD(0xf1, 6), 0x59,0x95,0x94,0x28,0x29,0xaf,
	LCM_CMD(0xf2, 6), 0x47,0x0c,0x0c,0x0f,0x1e,0x49,
	LCM_CMD(0xf3, 6), 0x59,0x95,0x94,0x28,0x29,0xaf,
	LCM_CMD(0x35, 1), 0x00,
	LCM_CMD(0x44, 2), 0x00,0x0a,
	LCM_CMD(0x11, 0),
	LCM_DELAY(120),
	LCM_CMD(0x29, 0),
	LCM_CMD(0x2c, 0),
	LCM_END
};

static const uint8_t cmd7C89F0_cavion_init[] = {
	//LCM_DELAY(50),
	LCM_CMD(0x11, 0), // Sleep Out Mode
	LCM_DELAY(120),
	LCM_CMD(0xb1, 3), 0x05,0x3a,0x3a,
	LCM_CMD(0xb2, 3), 0x05,0x3a,0x3a,
	LCM_CMD(0xb3, 6), 0x05,0x3a,0x3a,0x05,0x3a,0x3a,
	LCM_CMD(0xb4, 1), 0x03, // Display Inversion Control
	// Power Control 1-5
	LCM_CMD(0xc0, 3), 0x28,0x08,0x84,
	LCM_CMD(0xc1, 1), 0xc0,
	LCM_CMD(0xc2, 2), 0x0d,0x00,
	LCM_CMD(0xc3, 2), 0x8d,0x2a,
	LCM_CMD(0xc4, 2), 0x8d,0xee,
	LCM_CMD(0xc5, 1), 0x0c, // VCOM Control 1
	//LCM_CMD(0x36, 1), 0xc8, // Memory Access Control
	// Set Gamma 1
	LCM_CMD(0xe0, 16), 0x05,0x1a,0x0c,0x0e,
		0x3a,0x34,0x2d,0x2f, 0x2d,0x2a,0x2f,0x3c, 0x00,0x01,0x02,0x10,
	// Set Gamma 2
	LCM_CMD(0xe1, 16), 0x04,0x1b,0x0d,0x0e,
		0x2d,0x29,0x24,0x29, 0x28,0x26,0x31,0x3b, 0x00,0x00,0x03,0x12,
	//LCM_DATA(1), 0x8c,
	LCM_CMD(0x3a, 1), 0x05, // Pixel Format Set
	LCM_CMD(0x29, 0), // Display ON
	LCM_END
};

#define LCD_CONFIG(id, w,h, mac, a,b,c,d,e,f, spi, name) \
	{ id, ~0, w,h, mac, { a,b,c,d,e,f }, { spi }, name##_init },
#define X(...) LCD_CONFIG(__VA_ARGS__)
#define NO_TIMINGS 0,0,0,0,0,0

static const lcd_config_t lcd_config1[] = {
/* F+ F256 */

	// Sitronix ST7789
	X(0x858552, 240,320, 0x00, 60,80,90,60,80,80, 0, cmd8585)
	// GlaxyCore GC9305 (untested)
	X(0x009305, 240,320, 0x48, 30,150,150,40,50,50, 39000000, cmd9305)
	// GlaxyCore GC9306
	X(0x009306, 240,320, 0x48, 30,150,150,40,40,40, 39000000, cmd9306)
	// GlaxyCore GC9300
	X(0x009300, 240,320, 0x48, 30,150,150,40,40,40, 0, cmd9300)

/* F+ Ezzy 4 */

// It looks like the timings for GlaxyCore in the firmware were mistakenly copied from Sitronix LCDs.

	// GlaxyCore GC9102 (untested)
	X(0x009102, 128,160, 0xd0, 60,80,90,60,80,80, 0, cmd9102)
	// GlaxyCore GC9106
	X(0x009106, 128,160, 0xd0, 60,80,90,60,80,80, 39000000, cmd9106)

/* Nokia TA-1174 */

	// Sitronix ST7735
	X(0x1c80f3, 128,160, 0xd8, NO_TIMINGS, 13000000, cmd1C80F3)
	// Sitronix ST7735 (from another factory)
	X(0x7c80f3, 128,160, 0xd8, NO_TIMINGS, 13000000, cmd1C80F3)

/* BQ 3586 Tank Max */

	// RenesasSP R61529
	X(0x01221529, 320,480, 0x00, 170,170,250,8,15,15, 0, cmd1529)

/* DEXP SD2810 */

	// NewVision NV3029G
	X(0x003033, 240,320, 0x08, 10,150,100,15,35,35, 0, cmd3033)

/* Nokia TA-1400 */

	// ??? (untested)
	X(0x80f6, 240, 320, 0x00, NO_TIMINGS, 52000000, cmd80F6)
	// Sitronix ST7789 (untested)
	X(0x8552, 240,320, 0x00, NO_TIMINGS, 52000000, cmd8552)
	// GlaxyCore GC9304 (untested)
	X(0x9304, 240,320, 0x48, NO_TIMINGS, 52000000, cmd9304)
	// ??? (untested)
	X(0x90fa, 240,320, 0x00, NO_TIMINGS, 52000000, cmd90FA)
	// ???
	X(0x9290f6, 240,320, 0x00, NO_TIMINGS, 52000000, cmd9290F6)

/* Samsung GT-E1272 (SC6531E) */

	// Sitronix ST7735P
	X(0x83760f, 128,160, 0xd0, 5,150,150,10,50,50, 0, cmd83760F)

/* F+ F197 */

	// NewVision NV3023
	X(0x333025, 128,160, 0x00, 15,120,75,15,35,35, 0, cmd333025_f197)

/* Alcatel 2019G */

	// GlaxyCore GC9308
	X(0x009308, 320,240, 0x90, NO_TIMINGS, 52000000, cmd9308)

/* Olmio E35 */

	// Ilitek ILI9481
	X(0x02049481, 320,480, 0x0a, 5,150,150,10,50,50, 0, cmd9481)

/* Texet TM-D324 */

	// NovaTek NT35310
	X(0x01015310, 320,480, 0x00, 5,150,150,10,20,20, 0, cmd5310)

/* Olmio A25 */

	// Ilitek ILI9328
	X(0x289328, 240,320, 0xc0, 5,150,150,10,50,50, 0, cmd9328)

/* Texet TM-321 */

	// Orise Tech SPFD5420A
	X(0x005420, 240,400, 0xc0, 10,150,100,30,50,70, 0, cmd5420)

/* Texet TM-308 */

	// Samsung S6D04H0A (0x6d04)
	X(0x61bc11, 240,320, 0x48, 150,60,60,100,35,35, 0, cmd6D04)

/* Texet TM-B316 */

	// Sitronix ST7735P
	X(0x8083760f, 128,160, 0xc0, 20,255,255,30,100,100, 0, cmd83760F_texet)

/* Texet TM-B323 */

	// Ilitek ILI9225G
	X(0x009226, 176,220, 0xc0, 5,150,150,10,50,50, 0, cmd9226)

/* Olmio A15 */

	// Sitronix ST7735S BOE
	X(0x7c89f0, 128,160, 0xd0, 150,150,150,150,150,150, 0, cmd7C89F0)

#if LIBC_SDIO == 0 /* no SD card slot */
/* LONG-CZ J9 */

	// Solomon Systech SSD1306
	X(0x001306, 64,48, 0x1c1, 15,120,75,15,35,35, 0, cmd1306)
#endif

/* Prestigio Wize J1 */

	// GlaxyCore GC9106
	X(0x80009106, 128,160, 0xd0, 30,150,150,40,50,50, 0, cmd9106_prestigio)

/* Nokia TA-1575 */

	// DZX7735
	X(0x83760f, 128,160, 0xd0, NO_TIMINGS, 48000000, cmd83760F_nokia)
	// SL7735
	X(0x837610, 128,160, 0xd0, NO_TIMINGS, 48000000, cmd837610)
	// YH7735V3+CTC
	X(0x3d760f, 128,160, 0xd0, NO_TIMINGS, 48000000, cmd3D760F)
	// SL7735V3+IVO
	X(0x2c89f1, 128,160, 0xd8, NO_TIMINGS, 48000000, cmd2C89F1)

/* Texet TM-408 */

	// GlaxyCore GC9307
	X(0x009307, 240,320, 0x48, 30,150,150,40,50,50, 0, cmd9307_chip1)
};

static const lcd_config_t lcd_config2[] = {

// GC9106 has checkerboard pattern artifacts on screen refresh when using the wrong config. It's not possible to detect which version of GC9106 is used since the ID is the same.
// It looks like half of the frame is updated every other pixel, and then the rest. Which probably increases the frame rate, but it hurts the eyes.

/* Texet TM-122, TM-130 */

	// GlaxyCore GC9106
	X(0x80009106, 128,160, 0xd0, 30,150,150,40,50,50, 0, cmd9106_chip2_texet)

/* Joy's S21 */

	// GlaxyCore GC9106
	X(0x009106, 128,160, 0xd0, 30,150,150,40,50,50, 0, cmd9106_chip2)
	// GlaxyCore GC9108
	X(0x009108, 128,160, 0xd0, 30,150,150,40,50,50, 0, cmd9108)

/* Vector M115 */

	// Sitronix ST7735S CTC
	X(0x807c89f0, 128+2,128+3, 0xc8, 15,120,75,15,35,35, 0, cmd7C89F0_square)

/* DZ09 */

	// GlaxyCore GC9307
	X(0x80009307, 240,240, 0x48, NO_TIMINGS, 48000000, cmd9307_square)

/* Itel it5626 */

	// GlaxyCore GC9307
	X(0x009307, 240,320, 0x48, 30,150,150,40,50,50, 0, cmd9307)

/* Samsung B310E */

	// Sitronix ST7735 DTC (untested)
	X(0x5cc0f1, 128,160, 0xc8, 15,45,90,5,15,40, 0, cmd5CC0F1)
	// Sitronix ST7735 TNM
	X(0x5ca1f1, 128,160, 0x00, 15,45,90,5,15,40, 0, cmd5CA1F1)

/* Children's Camera (YX_Q5) */

	// NewVision NV3023
	X(0x333025, 128,160, 0x08, 45,120,120,30,80,80, 0, cmd333025)

/* Nomi i184 */

	// GlaxyCore GC9102
	X(0x009102, 128,160, 0xd0, 30,120,120,40,50,50, 0, cmd9102_nomi)

/* Sigma mobile X-treme IO67 */

	// GlaxyCore GC9305
	X(0x009305, 240,320, 0x48, 50,120,75,40,50,50, 0, cmd9305_sigma)

/* Samsung GT-E1272 (SC6530) */

	// Sitronix ST7735 BYD
	X(0x5cb1f0, 128,160, 0xc8, 15,45,90,10,30,60, 0, cmd5CB1F0)

/* Texet TM-302 */

	// Sitronix ST7789
	X(0x858552, 240,320, 0x00, 15,120,75,40,50,50, 0, cmd8552_chip2)

/* Olmio X04 */

	// Ilitek ILI9341
	X(0x009341, 240,320, 0x08, 15,120,75,15,35,35, 0, cmd9341)

/* Tokky FP10, Fontel FP100 */

	// Sitronix ST7567
	X(0x007567, 128,64, 0x191, 30,150,150,40,50,50, 0, cmd7567)

/* Joy's S16 */

	// HX1230 (0x0001)
	X(0x001230, 96,68, 0x1c1, NO_TIMINGS, 0, cmd1230)

/* Joy's S19 */

	// Sitronix ST7565R
	X(0x007565, 128,64, 0x181, 30,150,150,40,50,50, 0, cmd7565)

/* Bjorn P220 */

	// NewVision NV3021
	X(0xd48066, 128,160, 0x88, 5,250,200,50,70,50, 0, cmd8066)

/* Cavion Base 1.7 */

	// Sitronix ST7735R
	X(0x7c89f0, 128,160, 0xc8, 5,250,200,50,70,50, 0, cmd7C89F0_cavion)
};
#undef X
#undef NO_TIMINGS

diff --git a/loader.c b/loader.c
index fb8b4a8..042f9b4 100644
--- a/loader.c
+++ b/loader.c
@@ -108,7 +108,12 @@ static void initmem(void *mem, int size)
 	char *p = mem;
 	if (memrand >= 0)
 	{
+#ifdef EMBEDDED
+		extern unsigned sys_timer_ms(void);
+		srand(memrand ? memrand : sys_timer_ms());
+#else
 		srand(memrand ? memrand : time(0));
+#endif
 		while(size--) *(p++) = rand();
 	}
 	else if (memfill >= 0)
@@ -117,6 +122,18 @@ static void initmem(void *mem, int size)
 
 static byte *loadfile(FILE *f, int *len)
 {
+#ifdef EMBEDDED
+	int n, l = 0; byte *d = NULL;
+	fseek(f, 0, SEEK_END);
+	n = ftell(f);
+	if (n) {
+		fseek(f, 0, SEEK_SET);
+		d = (byte*)malloc(n);
+		if (d) l = fread(d, 1, n, f);
+	}
+	*len = l;
+	return d;
+#else
 	int c, l = 0, p = 0;
 	byte *d = 0, buf[4096];
 
@@ -132,6 +149,7 @@ static byte *loadfile(FILE *f, int *len)
 	}
 	*len = l;
 	return d;
+#endif
 }
 
 static byte *inf_buf;
@@ -288,19 +306,29 @@ static byte *do_unxz(byte *data, int *len) {
 
 static byte *decompress(byte *data, int *len)
 {
+#ifndef NO_GZ
 	if (data[0] == 0x1f && data[1] == 0x8b)
 		return gunzip(data, len);
+#endif
+#ifndef NO_XZ
 	if (data[0] == 0xFD && !memcmp(data+1, "7zXZ", 4))
 		return do_unxz(data, len);
+#endif
+#ifndef NO_ZIP
 	if (data[0] == 'P' && !memcmp(data+1, "K\03\04", 3))
 		return pkunzip(data, len);
+#endif
 	return data;
 }
 
 static FILE* rom_loadfile(char *fn, byte** data, int *len) {
 	FILE *f;
+#ifdef EMBEDDED
+	f = fopen(fn, "rb");
+#else
 	if (strcmp(fn, "-")) f = fopen(fn, "rb");
 	else f = stdin;
+#endif
 	if (!f) {
 	err:
 		loader_set_error("cannot open rom file: %s\n", fn);
@@ -354,8 +382,15 @@ int rom_load()
 	FILE *f;
 	byte c, *data, *header;
 	int len = 0, rlen;
+#ifdef APP_DATA_EXCEPT
+	byte* init_rommap(const char *fn);
+	(void)f; (void)len;
+	data = init_rommap(romfile);
+	if(!data) return -1;
+#else
 	f = rom_loadfile(romfile, &data, &len);
 	if(!f) return -1;
+#endif
 	header = data;
 
 	memcpy(rom.name, header+0x0134, 16);
@@ -384,8 +419,12 @@ int rom_load()
 	c = header[0x0143];
 
 	/* from this point on, we may no longer access data and header */
+#ifdef APP_DATA_EXCEPT
+	rom.bank = data;
+#else
 	rom.bank = realloc(data, rlen);
 	if (rlen > len) memset(rom.bank[0]+len, 0xff, rlen - len);
+#endif
 
 	ram.sbank = malloc(8192 * mbc.ramsize);
 
@@ -398,7 +437,9 @@ int rom_load()
 	hw.cgb = ((c == 0x80) || (c == 0xc0)) && !forcedmg;
 	hw.gba = (hw.cgb && gbamode);
 
+#ifndef APP_DATA_EXCEPT
 	if (strcmp(romfile, "-")) fclose(f);
+#endif
 
 	return 0;
 }
@@ -509,7 +550,9 @@ void loader_unload()
 	if (romfile) FREENULL(romfile);
 	if (sramfile) FREENULL(sramfile);
 	if (saveprefix) FREENULL(saveprefix);
+#ifndef APP_DATA_EXCEPT
 	if (rom.bank) FREENULL(rom.bank);
+#endif
 	if (ram.sbank) FREENULL(ram.sbank);
 	if (bootrom.bank) FREENULL(bootrom.bank);
 	mbc.type = mbc.romsize = mbc.ramsize = mbc.batt = 0;
@@ -559,7 +602,11 @@ int loader_init(char *s)
 	else if (romfile && *base(romfile) && strcmp(romfile, "-"))
 	{
 		name = strdup(base(romfile));
+#ifdef EMBEDDED
+		p = strrchr(name, '.');
+#else
 		p = strchr(name, '.');
+#endif
 		if (p) *p = 0;
 	}
 	else name = ldup(rom.name);
diff --git a/main.c b/main.c
index 9c0cf85..f82619d 100644
--- a/main.c
+++ b/main.c
@@ -211,6 +211,7 @@ void die(char *fmt, ...)
 	exit(1);
 }
 
+#ifndef EMBEDDED
 static int bad_signals[] =
 {
 	/* These are all standard, so no need to #ifdef them... */
@@ -235,6 +236,7 @@ static void catch_signals()
 	for (i = 0; bad_signals[i]; i++)
 		signal(bad_signals[i], fatalsignal);
 }
+#endif
 
 
 
@@ -257,8 +259,13 @@ int load_rom_and_rc(char *rom) {
 	rom = strdup(rom);
 	sys_sanitize(rom);
 	if(loader_init(rom)) {
+#if 1
+		fprintf(stderr, "rom load failed: %s\n", loader_get_error()?loader_get_error():"");
+		exit(1);
+#else
 		/*loader_get_error();*/
 		return -1;
+#endif
 	}
 	emu_reset();
 	return 0;
@@ -298,7 +305,11 @@ int main(int argc, char *argv[])
 
 	init_exports();
 
+#ifdef EMBEDDED
+	s = "";
+#else
 	s = strdup(argv[0]);
+#endif
 	sys_sanitize(s);
 	sys_initpath(s);
 
@@ -364,7 +375,9 @@ int main(int argc, char *argv[])
 
 	/* FIXME - make interface modules responsible for atexit() */
 	atexit(shutdown);
+#ifndef EMBEDDED
 	catch_signals();
+#endif
 	vid_init();
 	joy_init();
 	pcm_init();
@@ -372,9 +385,13 @@ int main(int argc, char *argv[])
 
 	if(rom) load_rom_and_rc(rom);
 	else {
+#ifdef NO_MENU
+		die("no rom selected\n");
+#else
 		rc_command("bind esc menu");
 		menu_initpage(mp_romsel);
 		menu_enter();
+#endif
 	}
 	while(1) {
 		emu_run();
diff --git a/rcfile.c b/rcfile.c
index 9945f52..d31aace 100644
--- a/rcfile.c
+++ b/rcfile.c
@@ -23,12 +23,26 @@ int rc_sourcefile(char *filename)
 	f = fopen(name, "r");
 	if (!f) return -1;
 
+#ifdef EMBEDDED
+	int a = 0;
+	while (a != EOF) {
+		int i = 0, skip = 0;
+		for (;;) {
+			a = fgetc(f);
+			if (a == EOF || a == '\n' || a == '\r') break;
+			if (a == '#') skip = 1;
+			if (!skip && i < sizeof(line) - 1) line[i++] = a;
+		}
+		if (!i) continue;
+		line[i] = 0;
+#else
 	for (;;)
 	{
 		if (feof(f)) break;
 		fgets(line, sizeof line, f);
 		if ((p = strpbrk(line, "#\r\n")))
 			*p = 0;
+#endif
 		rc_command(line);
 	}
 	fclose(f);
diff --git a/rcvars.c b/rcvars.c
index 95a9d27..f4b1e7d 100644
--- a/rcvars.c
+++ b/rcvars.c
@@ -127,11 +127,13 @@ int rc_setvar_n(int i, int c, char **v)
 		n = (int *)rcvars[i].mem;
 		*n = my_atoi(v[0]);
 		return 0;
+#ifndef NO_FLOAT
 	case rcv_float:
 		if (c < 1) return -1;
 		f = (float *)rcvars[i].mem;
 		*f = atof(v[0]);
 		return 0;
+#endif
 	case rcv_string:
 		if (c < 1) return -1;
 		s = (char **)rcvars[i].mem;
@@ -196,6 +198,7 @@ int rc_getint_n(int i)
 	return 0;
 }
 
+#ifndef NO_FLOAT
 float rc_getfloat_n(int i)
 {
 	if (i < 0) return 0.0;
@@ -206,6 +209,7 @@ float rc_getfloat_n(int i)
 	}
 	return 0.0;
 }
+#endif
 
 int *rc_getvec_n(int i)
 {
@@ -236,10 +240,12 @@ int rc_getint(char *name)
 	return rc_getint_n(rc_findvar(name));
 }
 
+#ifndef NO_FLOAT
 float rc_getfloat(char *name)
 {
 	return rc_getfloat_n(rc_findvar(name));
 }
+#endif
 
 int *rc_getvec(char *name)
 {
diff --git a/rtc.c b/rtc.c
index c3785ec..22fa18a 100644
--- a/rtc.c
+++ b/rtc.c
@@ -95,13 +95,16 @@ void rtc_tick()
 
 void rtc_save_internal(FILE *f)
 {
+#ifndef EMBEDDED
 	fprintf(f, "%d %d %d %02d %02d %02d %02d\n%ld\n",
 		rtc.carry, rtc.stop, rtc.d, rtc.h, rtc.m, rtc.s, rtc.t,
 		(long) time(0));
+#endif
 }
 
 void rtc_load_internal(FILE *f)
 {
+#ifndef EMBEDDED
 	int rt = 0;
 	fscanf(
 		f, "%d %d %d %02d %02d %02d %02d\n%d\n",
@@ -116,6 +119,7 @@ void rtc_load_internal(FILE *f)
 	rtc.carry &= 1;
 	if (rt) rt = (time(0) - rt) * 60;
 	if (syncrtc) while (rt-- > 0) rtc_tick();
+#endif
 }
 
 
diff --git a/sys.h b/sys.h
index 944f3cb..ec98aca 100644
--- a/sys.h
+++ b/sys.h
@@ -32,6 +32,9 @@ void kb_close();
 
 
 /* FIXME these have different prototype for obsolete ( == M$ ) platforms */
+#ifdef EMBEDDED
+struct timeval;
+#endif
 #include <sys/time.h>
 int sys_elapsed(struct timeval *prev);
 void sys_initpath();
